{
  "metadata": {
    "tool_info": {
      "name": "scip-test-generator",
      "version": "1.0.0"
    },
    "project_root": "file://python-test-project"
  },
  "documents": [
    {
      "language": "python",
      "relative_path": "user.py",
      "symbols": [
        {
          "symbol": "User",
          "kind": 7,
          "display_name": "User"
        },
        {
          "symbol": "UserRepository",
          "kind": 7,
          "display_name": "UserRepository"
        },
        {
          "symbol": "UserService",
          "kind": 7,
          "display_name": "UserService"
        }
      ],
      "text": "\"\"\"User management system for testing SCIP integration.\"\"\"\n\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Dict, Optional, List\nimport json\n\n\n@dataclass\nclass User:\n    \"\"\"Represents a user in the system.\"\"\"\n    id: int\n    name: str\n    email: str\n    created: datetime\n    \n    def to_dict(self) -\u003e dict:\n        \"\"\"Convert user to dictionary representation.\"\"\"\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'created': self.created.isoformat()\n        }\n    \n    @classmethod\n    def from_dict(cls, data: dict) -\u003e 'User':\n        \"\"\"Create user from dictionary representation.\"\"\"\n        return cls(\n            id=data['id'],\n            name=data['name'],\n            email=data['email'],\n            created=datetime.fromisoformat(data['created'])\n        )\n\n\nclass UserRepository(ABC):\n    \"\"\"Abstract base class for user data access.\"\"\"\n    \n    @abstractmethod\n    def get_user(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Retrieve a user by ID.\"\"\"\n        pass\n    \n    @abstractmethod\n    def create_user(self, name: str, email: str) -\u003e User:\n        \"\"\"Create a new user.\"\"\"\n        pass\n    \n    @abstractmethod\n    def update_user(self, user_id: int, **kwargs) -\u003e User:\n        \"\"\"Update an existing user.\"\"\"\n        pass\n    \n    @abstractmethod\n    def delete_user(self, user_id: int) -\u003e bool:\n        \"\"\"Delete a user by ID.\"\"\"\n        pass\n    \n    @abstractmethod\n    def list_users(self) -\u003e List[User]:\n        \"\"\"List all users.\"\"\"\n        pass\n\n\nclass InMemoryUserRepository(UserRepository):\n    \"\"\"In-memory implementation of UserRepository.\"\"\"\n    \n    def __init__(self):\n        self._users: Dict[int, User] = {}\n        self._next_id = 1\n    \n    def get_user(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Retrieve a user by ID.\"\"\"\n        return self._users.get(user_id)\n    \n    def create_user(self, name: str, email: str) -\u003e User:\n        \"\"\"Create a new user.\"\"\"\n        user = User(\n            id=self._next_id,\n            name=name,\n            email=email,\n            created=datetime.now()\n        )\n        self._users[user.id] = user\n        self._next_id += 1\n        return user\n    \n    def update_user(self, user_id: int, **kwargs) -\u003e User:\n        \"\"\"Update an existing user.\"\"\"\n        user = self._users.get(user_id)\n        if not user:\n            raise ValueError(f\"User with ID {user_id} not found\")\n        \n        # Update user attributes\n        for key, value in kwargs.items():\n            if hasattr(user, key):\n                setattr(user, key, value)\n        \n        return user\n    \n    def delete_user(self, user_id: int) -\u003e bool:\n        \"\"\"Delete a user by ID.\"\"\"\n        if user_id in self._users:\n            del self._users[user_id]\n            return True\n        return False\n    \n    def list_users(self) -\u003e List[User]:\n        \"\"\"List all users.\"\"\"\n        return list(self._users.values())\n\n\nclass UserService:\n    \"\"\"Service class for user management business logic.\"\"\"\n    \n    def __init__(self, repository: UserRepository):\n        self.repository = repository\n    \n    def get_user_by_id(self, user_id: int) -\u003e Optional[User]:\n        \"\"\"Get a user by ID with validation.\"\"\"\n        if user_id \u003c= 0:\n            raise ValueError(\"User ID must be positive\")\n        return self.repository.get_user(user_id)\n    \n    def create_new_user(self, name: str, email: str) -\u003e User:\n        \"\"\"Create a new user with validation.\"\"\"\n        if not name or not name.strip():\n            raise ValueError(\"Name cannot be empty\")\n        if not email or '@' not in email:\n            raise ValueError(\"Invalid email address\")\n        \n        return self.repository.create_user(name.strip(), email.strip())\n    \n    def update_user_profile(self, user_id: int, **updates) -\u003e User:\n        \"\"\"Update user profile with validation.\"\"\"\n        if user_id \u003c= 0:\n            raise ValueError(\"User ID must be positive\")\n        \n        # Validate updates\n        if 'name' in updates and not updates['name'].strip():\n            raise ValueError(\"Name cannot be empty\")\n        if 'email' in updates and '@' not in updates['email']:\n            raise ValueError(\"Invalid email address\")\n        \n        return self.repository.update_user(user_id, **updates)\n    \n    def remove_user(self, user_id: int) -\u003e bool:\n        \"\"\"Remove a user from the system.\"\"\"\n        if user_id \u003c= 0:\n            raise ValueError(\"User ID must be positive\")\n        return self.repository.delete_user(user_id)\n    \n    def get_all_users(self) -\u003e List[User]:\n        \"\"\"Get all users in the system.\"\"\"\n        return self.repository.list_users()\n    \n    def search_users_by_name(self, name_query: str) -\u003e List[User]:\n        \"\"\"Search users by name.\"\"\"\n        if not name_query or not name_query.strip():\n            return []\n        \n        query = name_query.lower().strip()\n        all_users = self.repository.list_users()\n        \n        return [\n            user for user in all_users\n            if query in user.name.lower()\n        ]\n    \n    def export_users_to_json(self) -\u003e str:\n        \"\"\"Export all users to JSON format.\"\"\"\n        users = self.repository.list_users()\n        user_data = [user.to_dict() for user in users]\n        return json.dumps(user_data, indent=2)\n\n\ndef main():\n    \"\"\"Example usage of the user management system.\"\"\"\n    repository = InMemoryUserRepository()\n    service = UserService(repository)\n    \n    try:\n        # Create some users\n        user1 = service.create_new_user(\"Alice Johnson\", \"alice@example.com\")\n        user2 = service.create_new_user(\"Bob Smith\", \"bob@example.com\")\n        user3 = service.create_new_user(\"Charlie Brown\", \"charlie@example.com\")\n        \n        print(f\"Created users: {[u.name for u in [user1, user2, user3]]}\")\n        \n        # Update a user\n        updated_user = service.update_user_profile(user1.id, name=\"Alice Johnson-Smith\")\n        print(f\"Updated user: {updated_user.name}\")\n        \n        # Search users\n        search_results = service.search_users_by_name(\"alice\")\n        print(f\"Search results: {[u.name for u in search_results]}\")\n        \n        # Export to JSON\n        json_export = service.export_users_to_json()\n        print(f\"JSON export: {json_export}\")\n        \n        # Remove a user\n        removed = service.remove_user(user2.id)\n        print(f\"User removed: {removed}\")\n        \n        # List remaining users\n        remaining_users = service.get_all_users()\n        print(f\"Remaining users: {[u.name for u in remaining_users]}\")\n        \n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
      "language": "python",
      "relative_path": "test_user.py",
      "text": "\"\"\"Tests for the user management system.\"\"\"\n\nimport pytest\nfrom datetime import datetime\nfrom user import User, InMemoryUserRepository, UserService\n\n\nclass TestUser:\n    \"\"\"Test cases for the User class.\"\"\"\n    \n    def test_user_creation(self):\n        \"\"\"Test user object creation.\"\"\"\n        now = datetime.now()\n        user = User(1, \"Test User\", \"test@example.com\", now)\n        \n        assert user.id == 1\n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n        assert user.created == now\n    \n    def test_user_to_dict(self):\n        \"\"\"Test user to dictionary conversion.\"\"\"\n        now = datetime.now()\n        user = User(1, \"Test User\", \"test@example.com\", now)\n        \n        user_dict = user.to_dict()\n        \n        assert user_dict['id'] == 1\n        assert user_dict['name'] == \"Test User\"\n        assert user_dict['email'] == \"test@example.com\"\n        assert user_dict['created'] == now.isoformat()\n    \n    def test_user_from_dict(self):\n        \"\"\"Test user creation from dictionary.\"\"\"\n        now = datetime.now()\n        data = {\n            'id': 1,\n            'name': 'Test User',\n            'email': 'test@example.com',\n            'created': now.isoformat()\n        }\n        \n        user = User.from_dict(data)\n        \n        assert user.id == 1\n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n        assert user.created == now\n\n\nclass TestInMemoryUserRepository:\n    \"\"\"Test cases for InMemoryUserRepository.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.repository = InMemoryUserRepository()\n    \n    def test_create_user(self):\n        \"\"\"Test user creation.\"\"\"\n        user = self.repository.create_user(\"Test User\", \"test@example.com\")\n        \n        assert user.id == 1\n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n        assert isinstance(user.created, datetime)\n    \n    def test_get_user(self):\n        \"\"\"Test user retrieval.\"\"\"\n        created_user = self.repository.create_user(\"Test User\", \"test@example.com\")\n        retrieved_user = self.repository.get_user(created_user.id)\n        \n        assert retrieved_user is not None\n        assert retrieved_user.id == created_user.id\n        assert retrieved_user.name == created_user.name\n    \n    def test_get_nonexistent_user(self):\n        \"\"\"Test retrieving non-existent user.\"\"\"\n        user = self.repository.get_user(999)\n        assert user is None\n    \n    def test_update_user(self):\n        \"\"\"Test user update.\"\"\"\n        created_user = self.repository.create_user(\"Original Name\", \"original@example.com\")\n        \n        updated_user = self.repository.update_user(\n            created_user.id,\n            name=\"Updated Name\",\n            email=\"updated@example.com\"\n        )\n        \n        assert updated_user.name == \"Updated Name\"\n        assert updated_user.email == \"updated@example.com\"\n        assert updated_user.id == created_user.id\n    \n    def test_update_nonexistent_user(self):\n        \"\"\"Test updating non-existent user.\"\"\"\n        with pytest.raises(ValueError, match=\"User with ID 999 not found\"):\n            self.repository.update_user(999, name=\"New Name\")\n    \n    def test_delete_user(self):\n        \"\"\"Test user deletion.\"\"\"\n        created_user = self.repository.create_user(\"Test User\", \"test@example.com\")\n        \n        deleted = self.repository.delete_user(created_user.id)\n        assert deleted is True\n        \n        retrieved_user = self.repository.get_user(created_user.id)\n        assert retrieved_user is None\n    \n    def test_delete_nonexistent_user(self):\n        \"\"\"Test deleting non-existent user.\"\"\"\n        deleted = self.repository.delete_user(999)\n        assert deleted is False\n    \n    def test_list_users(self):\n        \"\"\"Test listing all users.\"\"\"\n        user1 = self.repository.create_user(\"User 1\", \"user1@example.com\")\n        user2 = self.repository.create_user(\"User 2\", \"user2@example.com\")\n        \n        users = self.repository.list_users()\n        \n        assert len(users) == 2\n        assert user1 in users\n        assert user2 in users\n\n\nclass TestUserService:\n    \"\"\"Test cases for UserService.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.repository = InMemoryUserRepository()\n        self.service = UserService(self.repository)\n    \n    def test_create_new_user_valid(self):\n        \"\"\"Test creating new user with valid data.\"\"\"\n        user = self.service.create_new_user(\"Test User\", \"test@example.com\")\n        \n        assert user.name == \"Test User\"\n        assert user.email == \"test@example.com\"\n    \n    def test_create_new_user_invalid_name(self):\n        \"\"\"Test creating user with invalid name.\"\"\"\n        with pytest.raises(ValueError, match=\"Name cannot be empty\"):\n            self.service.create_new_user(\"\", \"test@example.com\")\n        \n        with pytest.raises(ValueError, match=\"Name cannot be empty\"):\n            self.service.create_new_user(\"   \", \"test@example.com\")\n    \n    def test_create_new_user_invalid_email(self):\n        \"\"\"Test creating user with invalid email.\"\"\"\n        with pytest.raises(ValueError, match=\"Invalid email address\"):\n            self.service.create_new_user(\"Test User\", \"invalid-email\")\n        \n        with pytest.raises(ValueError, match=\"Invalid email address\"):\n            self.service.create_new_user(\"Test User\", \"\")\n    \n    def test_get_user_by_id_valid(self):\n        \"\"\"Test getting user by valid ID.\"\"\"\n        created_user = self.service.create_new_user(\"Test User\", \"test@example.com\")\n        retrieved_user = self.service.get_user_by_id(created_user.id)\n        \n        assert retrieved_user is not None\n        assert retrieved_user.id == created_user.id\n    \n    def test_get_user_by_id_invalid(self):\n        \"\"\"Test getting user by invalid ID.\"\"\"\n        with pytest.raises(ValueError, match=\"User ID must be positive\"):\n            self.service.get_user_by_id(0)\n        \n        with pytest.raises(ValueError, match=\"User ID must be positive\"):\n            self.service.get_user_by_id(-1)\n    \n    def test_search_users_by_name(self):\n        \"\"\"Test searching users by name.\"\"\"\n        user1 = self.service.create_new_user(\"Alice Johnson\", \"alice@example.com\")\n        user2 = self.service.create_new_user(\"Bob Alice\", \"bob@example.com\")\n        user3 = self.service.create_new_user(\"Charlie Brown\", \"charlie@example.com\")\n        \n        results = self.service.search_users_by_name(\"alice\")\n        \n        assert len(results) == 2\n        assert user1 in results\n        assert user2 in results\n        assert user3 not in results\n    \n    def test_export_users_to_json(self):\n        \"\"\"Test exporting users to JSON.\"\"\"\n        user1 = self.service.create_new_user(\"User 1\", \"user1@example.com\")\n        user2 = self.service.create_new_user(\"User 2\", \"user2@example.com\")\n        \n        json_export = self.service.export_users_to_json()\n        \n        assert isinstance(json_export, str)\n        assert '\"name\": \"User 1\"' in json_export\n        assert '\"name\": \"User 2\"' in json_export\n"
    }
  ]
}
