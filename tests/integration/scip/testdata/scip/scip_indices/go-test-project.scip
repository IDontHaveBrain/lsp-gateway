{
  "metadata": {
    "tool_info": {
      "name": "scip-test-generator",
      "version": "1.0.0"
    },
    "project_root": "file://go-test-project"
  },
  "documents": [
    {
      "language": "go",
      "relative_path": "main_test.go",
      "text": "package main\n\nimport (\n\t\"context\"\n\t\"testing\"\n\t\"time\"\n)\n\nfunc TestUserService_CreateUser(t *testing.T) {\n\tservice := NewUserService()\n\tctx := context.Background()\n\t\n\tuser := \u0026User{\n\t\tName:  \"Test User\",\n\t\tEmail: \"test@example.com\",\n\t}\n\t\n\terr := service.CreateUser(ctx, user)\n\tif err != nil {\n\t\tt.Fatalf(\"CreateUser failed: %v\", err)\n\t}\n\t\n\tif user.ID == 0 {\n\t\tt.Error(\"User ID should be set after creation\")\n\t}\n\t\n\tif user.Created.IsZero() {\n\t\tt.Error(\"User Created time should be set\")\n\t}\n}\n\nfunc TestUserService_GetUser(t *testing.T) {\n\tservice := NewUserService()\n\tctx := context.Background()\n\t\n\toriginalUser := \u0026User{\n\t\tName:  \"Test User\",\n\t\tEmail: \"test@example.com\",\n\t}\n\t\n\terr := service.CreateUser(ctx, originalUser)\n\tif err != nil {\n\t\tt.Fatalf(\"CreateUser failed: %v\", err)\n\t}\n\t\n\tretrievedUser, err := service.GetUser(ctx, originalUser.ID)\n\tif err != nil {\n\t\tt.Fatalf(\"GetUser failed: %v\", err)\n\t}\n\t\n\tif retrievedUser.Name != originalUser.Name {\n\t\tt.Errorf(\"Expected name %s, got %s\", originalUser.Name, retrievedUser.Name)\n\t}\n}\n\nfunc TestUserService_UpdateUser(t *testing.T) {\n\tservice := NewUserService()\n\tctx := context.Background()\n\t\n\tuser := \u0026User{\n\t\tName:  \"Original Name\",\n\t\tEmail: \"original@example.com\",\n\t}\n\t\n\terr := service.CreateUser(ctx, user)\n\tif err != nil {\n\t\tt.Fatalf(\"CreateUser failed: %v\", err)\n\t}\n\t\n\tuser.Name = \"Updated Name\"\n\tuser.Email = \"updated@example.com\"\n\t\n\terr = service.UpdateUser(ctx, user)\n\tif err != nil {\n\t\tt.Fatalf(\"UpdateUser failed: %v\", err)\n\t}\n\t\n\tupdatedUser, err := service.GetUser(ctx, user.ID)\n\tif err != nil {\n\t\tt.Fatalf(\"GetUser failed: %v\", err)\n\t}\n\t\n\tif updatedUser.Name != \"Updated Name\" {\n\t\tt.Errorf(\"Expected updated name, got %s\", updatedUser.Name)\n\t}\n}\n\nfunc TestUserService_DeleteUser(t *testing.T) {\n\tservice := NewUserService()\n\tctx := context.Background()\n\t\n\tuser := \u0026User{\n\t\tName:  \"Test User\",\n\t\tEmail: \"test@example.com\",\n\t}\n\t\n\terr := service.CreateUser(ctx, user)\n\tif err != nil {\n\t\tt.Fatalf(\"CreateUser failed: %v\", err)\n\t}\n\t\n\terr = service.DeleteUser(ctx, user.ID)\n\tif err != nil {\n\t\tt.Fatalf(\"DeleteUser failed: %v\", err)\n\t}\n\t\n\t_, err = service.GetUser(ctx, user.ID)\n\tif err == nil {\n\t\tt.Error(\"Expected error when getting deleted user\")\n\t}\n}\n"
    },
    {
      "language": "go",
      "relative_path": "main.go",
      "occurrences": [
        {
          "range": [
            16,
            33,
            16,
            37
          ],
          "symbol": "User",
          "symbol_roles": 1
        },
        {
          "range": [
            65,
            12,
            65,
            25
          ],
          "symbol": "NewUserService",
          "symbol_roles": 64
        }
      ],
      "symbols": [
        {
          "symbol": "User",
          "kind": 54,
          "display_name": "User"
        },
        {
          "symbol": "UserService",
          "kind": 21,
          "display_name": "UserService"
        },
        {
          "symbol": "DefaultUserService",
          "kind": 54,
          "display_name": "DefaultUserService"
        },
        {
          "symbol": "NewUserService",
          "kind": 17,
          "display_name": "NewUserService"
        },
        {
          "symbol": "GetUser",
          "kind": 26,
          "display_name": "GetUser"
        }
      ],
      "text": "package main\n\nimport (\n\t\"fmt\"\n\t\"context\"\n\t\"time\"\n)\n\n// User represents a user in the system\ntype User struct {\n\tID       int64     `json:\"id\"`\n\tName     string    `json:\"name\"`\n\tEmail    string    `json:\"email\"`\n\tCreated  time.Time `json:\"created\"`\n}\n\n// UserService provides user management functionality\ntype UserService interface {\n\tGetUser(ctx context.Context, id int64) (*User, error)\n\tCreateUser(ctx context.Context, user *User) error\n\tUpdateUser(ctx context.Context, user *User) error\n\tDeleteUser(ctx context.Context, id int64) error\n}\n\n// DefaultUserService implements UserService\ntype DefaultUserService struct {\n\tusers map[int64]*User\n}\n\n// NewUserService creates a new user service\nfunc NewUserService() *DefaultUserService {\n\treturn \u0026DefaultUserService{\n\t\tusers: make(map[int64]*User),\n\t}\n}\n\n// GetUser retrieves a user by ID\nfunc (s *DefaultUserService) GetUser(ctx context.Context, id int64) (*User, error) {\n\tuser, exists := s.users[id]\n\tif !exists {\n\t\treturn nil, fmt.Errorf(\"user not found: %d\", id)\n\t}\n\treturn user, nil\n}\n\n// CreateUser creates a new user\nfunc (s *DefaultUserService) CreateUser(ctx context.Context, user *User) error {\n\tif user.ID == 0 {\n\t\tuser.ID = time.Now().Unix()\n\t}\n\tuser.Created = time.Now()\n\ts.users[user.ID] = user\n\treturn nil\n}\n\n// UpdateUser updates an existing user\nfunc (s *DefaultUserService) UpdateUser(ctx context.Context, user *User) error {\n\tif _, exists := s.users[user.ID]; !exists {\n\t\treturn fmt.Errorf(\"user not found: %d\", user.ID)\n\t}\n\ts.users[user.ID] = user\n\treturn nil\n}\n\n// DeleteUser removes a user\nfunc (s *DefaultUserService) DeleteUser(ctx context.Context, id int64) error {\n\tdelete(s.users, id)\n\treturn nil\n}\n\nfunc main() {\n\tservice := NewUserService()\n\t\n\tuser := \u0026User{\n\t\tName:  \"John Doe\",\n\t\tEmail: \"john.doe@example.com\",\n\t}\n\t\n\tctx := context.Background()\n\tif err := service.CreateUser(ctx, user); err != nil {\n\t\tpanic(err)\n\t}\n\t\n\tfmt.Printf(\"Created user: %+v\\n\", user)\n}\n"
    }
  ]
}
