{
  "metadata": {
    "tool_info": {
      "name": "scip-test-generator",
      "version": "1.0.0"
    },
    "project_root": "file://typescript-test-project"
  },
  "documents": [
    {
      "language": "typescript",
      "relative_path": "user.test.ts",
      "text": "import { User, UserRepository, InMemoryUserRepository, UserService } from './index';\n\ndescribe('UserService', () =\u003e {\n  let repository: UserRepository;\n  let userService: UserService;\n\n  beforeEach(() =\u003e {\n    repository = new InMemoryUserRepository();\n    userService = new UserService(repository);\n  });\n\n  describe('createNewUser', () =\u003e {\n    it('should create a user with valid data', async () =\u003e {\n      const user = await userService.createNewUser('Test User', 'test@example.com');\n      \n      expect(user.id).toBeDefined();\n      expect(user.name).toBe('Test User');\n      expect(user.email).toBe('test@example.com');\n      expect(user.created).toBeInstanceOf(Date);\n    });\n\n    it('should throw error for invalid data', async () =\u003e {\n      await expect(userService.createNewUser('', 'test@example.com'))\n        .rejects.toThrow('Name and email are required');\n      \n      await expect(userService.createNewUser('Test', ''))\n        .rejects.toThrow('Name and email are required');\n    });\n  });\n\n  describe('getUserById', () =\u003e {\n    it('should return user when found', async () =\u003e {\n      const createdUser = await userService.createNewUser('Test User', 'test@example.com');\n      const foundUser = await userService.getUserById(createdUser.id);\n      \n      expect(foundUser).not.toBeNull();\n      expect(foundUser!.id).toBe(createdUser.id);\n      expect(foundUser!.name).toBe('Test User');\n    });\n\n    it('should return null when user not found', async () =\u003e {\n      const foundUser = await userService.getUserById(999);\n      expect(foundUser).toBeNull();\n    });\n  });\n\n  describe('updateUserProfile', () =\u003e {\n    it('should update user data', async () =\u003e {\n      const createdUser = await userService.createNewUser('Original Name', 'original@example.com');\n      \n      const updatedUser = await userService.updateUserProfile(createdUser.id, {\n        name: 'Updated Name',\n        email: 'updated@example.com'\n      });\n      \n      expect(updatedUser.name).toBe('Updated Name');\n      expect(updatedUser.email).toBe('updated@example.com');\n      expect(updatedUser.id).toBe(createdUser.id);\n    });\n\n    it('should throw error for non-existent user', async () =\u003e {\n      await expect(userService.updateUserProfile(999, { name: 'New Name' }))\n        .rejects.toThrow('User with id 999 not found');\n    });\n  });\n\n  describe('removeUser', () =\u003e {\n    it('should remove user successfully', async () =\u003e {\n      const createdUser = await userService.createNewUser('Test User', 'test@example.com');\n      \n      await userService.removeUser(createdUser.id);\n      \n      const foundUser = await userService.getUserById(createdUser.id);\n      expect(foundUser).toBeNull();\n    });\n  });\n});\n"
    },
    {
      "language": "typescript",
      "relative_path": "index.ts",
      "symbols": [
        {
          "symbol": "User",
          "kind": 21,
          "display_name": "User"
        },
        {
          "symbol": "UserRepository",
          "kind": 21,
          "display_name": "UserRepository"
        },
        {
          "symbol": "UserService",
          "kind": 7,
          "display_name": "UserService"
        }
      ],
      "text": "// User management system\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  created: Date;\n}\n\nexport interface UserRepository {\n  getUser(id: number): Promise\u003cUser | null\u003e;\n  createUser(user: Omit\u003cUser, 'id' | 'created'\u003e): Promise\u003cUser\u003e;\n  updateUser(id: number, user: Partial\u003cUser\u003e): Promise\u003cUser\u003e;\n  deleteUser(id: number): Promise\u003cvoid\u003e;\n}\n\nexport class InMemoryUserRepository implements UserRepository {\n  private users: Map\u003cnumber, User\u003e = new Map();\n  private nextId: number = 1;\n\n  async getUser(id: number): Promise\u003cUser | null\u003e {\n    return this.users.get(id) || null;\n  }\n\n  async createUser(userData: Omit\u003cUser, 'id' | 'created'\u003e): Promise\u003cUser\u003e {\n    const user: User = {\n      id: this.nextId++,\n      name: userData.name,\n      email: userData.email,\n      created: new Date(),\n    };\n    \n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial\u003cUser\u003e): Promise\u003cUser\u003e {\n    const existingUser = this.users.get(id);\n    if (!existingUser) {\n      throw new Error(\"User with id \" + id + \" not found\");\n    }\n    \n    const updatedUser = { ...existingUser, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: number): Promise\u003cvoid\u003e {\n    this.users.delete(id);\n  }\n}\n\nexport class UserService {\n  constructor(private repository: UserRepository) {}\n\n  async getUserById(id: number): Promise\u003cUser | null\u003e {\n    return this.repository.getUser(id);\n  }\n\n  async createNewUser(name: string, email: string): Promise\u003cUser\u003e {\n    if (!name || !email) {\n      throw new Error('Name and email are required');\n    }\n    \n    return this.repository.createUser({ name, email });\n  }\n\n  async updateUserProfile(id: number, updates: Partial\u003cUser\u003e): Promise\u003cUser\u003e {\n    return this.repository.updateUser(id, updates);\n  }\n\n  async removeUser(id: number): Promise\u003cvoid\u003e {\n    return this.repository.deleteUser(id);\n  }\n}\n\n// Usage example\nasync function main() {\n  const repository = new InMemoryUserRepository();\n  const userService = new UserService(repository);\n  \n  try {\n    const user = await userService.createNewUser('John Doe', 'john@example.com');\n    console.log('Created user:', user);\n    \n    const retrievedUser = await userService.getUserById(user.id);\n    console.log('Retrieved user:', retrievedUser);\n    \n    const updatedUser = await userService.updateUserProfile(user.id, { \n      name: 'John Smith' \n    });\n    console.log('Updated user:', updatedUser);\n    \n    await userService.removeUser(user.id);\n    console.log('User removed');\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n\nmain().catch(console.error);\n"
    }
  ]
}
