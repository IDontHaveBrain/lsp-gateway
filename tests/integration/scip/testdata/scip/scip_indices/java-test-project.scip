{
  "metadata": {
    "tool_info": {
      "name": "scip-test-generator",
      "version": "1.0.0"
    },
    "project_root": "file://java-test-project"
  },
  "documents": [
    {
      "language": "java",
      "relative_path": "src/main/java/com/example/user/User.java",
      "symbols": [
        {
          "symbol": "User",
          "kind": 7,
          "display_name": "User"
        }
      ],
      "text": "package com.example.user;\n\nimport java.time.LocalDateTime;\nimport java.util.Objects;\n\n/**\n * Represents a user in the system.\n */\npublic class User {\n    private Long id;\n    private String name;\n    private String email;\n    private LocalDateTime created;\n    \n    public User() {\n        this.created = LocalDateTime.now();\n    }\n    \n    public User(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.created = LocalDateTime.now();\n    }\n    \n    public User(String name, String email) {\n        this(null, name, email);\n    }\n    \n    // Getters and setters\n    public Long getId() {\n        return id;\n    }\n    \n    public void setId(Long id) {\n        this.id = id;\n    }\n    \n    public String getName() {\n        return name;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n    \n    public String getEmail() {\n        return email;\n    }\n    \n    public void setEmail(String email) {\n        this.email = email;\n    }\n    \n    public LocalDateTime getCreated() {\n        return created;\n    }\n    \n    public void setCreated(LocalDateTime created) {\n        this.created = created;\n    }\n    \n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null || getClass() != obj.getClass()) return false;\n        User user = (User) obj;\n        return Objects.equals(id, user.id) \u0026\u0026\n               Objects.equals(name, user.name) \u0026\u0026\n               Objects.equals(email, user.email);\n    }\n    \n    @Override\n    public int hashCode() {\n        return Objects.hash(id, name, email);\n    }\n    \n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", name='\" + name + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", created=\" + created +\n                '}';\n    }\n}\n"
    },
    {
      "language": "java",
      "relative_path": "src/main/java/com/example/user/UserRepository.java",
      "symbols": [
        {
          "symbol": "UserRepository",
          "kind": 21,
          "display_name": "UserRepository"
        }
      ],
      "text": "package com.example.user;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Repository interface for User data access.\n */\npublic interface UserRepository {\n    \n    /**\n     * Find a user by ID.\n     */\n    Optional\u003cUser\u003e findById(Long id);\n    \n    /**\n     * Find a user by email.\n     */\n    Optional\u003cUser\u003e findByEmail(String email);\n    \n    /**\n     * Find users by name containing the given string.\n     */\n    List\u003cUser\u003e findByNameContaining(String name);\n    \n    /**\n     * Get all users.\n     */\n    List\u003cUser\u003e findAll();\n    \n    /**\n     * Save a user.\n     */\n    User save(User user);\n    \n    /**\n     * Delete a user by ID.\n     */\n    void deleteById(Long id);\n    \n    /**\n     * Check if a user exists by ID.\n     */\n    boolean existsById(Long id);\n    \n    /**\n     * Count total number of users.\n     */\n    long count();\n}\n"
    },
    {
      "language": "java",
      "relative_path": "src/main/java/com/example/user/InMemoryUserRepository.java",
      "text": "package com.example.user;\n\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.stream.Collectors;\n\n/**\n * In-memory implementation of UserRepository for testing.\n */\npublic class InMemoryUserRepository implements UserRepository {\n    \n    private final Map\u003cLong, User\u003e users = new ConcurrentHashMap\u003c\u003e();\n    private final AtomicLong idGenerator = new AtomicLong(1);\n    \n    @Override\n    public Optional\u003cUser\u003e findById(Long id) {\n        return Optional.ofNullable(users.get(id));\n    }\n    \n    @Override\n    public Optional\u003cUser\u003e findByEmail(String email) {\n        return users.values().stream()\n                .filter(user -\u003e Objects.equals(user.getEmail(), email))\n                .findFirst();\n    }\n    \n    @Override\n    public List\u003cUser\u003e findByNameContaining(String name) {\n        if (name == null || name.trim().isEmpty()) {\n            return new ArrayList\u003c\u003e();\n        }\n        \n        String searchTerm = name.toLowerCase().trim();\n        return users.values().stream()\n                .filter(user -\u003e user.getName() != null \u0026\u0026 \n                               user.getName().toLowerCase().contains(searchTerm))\n                .collect(Collectors.toList());\n    }\n    \n    @Override\n    public List\u003cUser\u003e findAll() {\n        return new ArrayList\u003c\u003e(users.values());\n    }\n    \n    @Override\n    public User save(User user) {\n        if (user == null) {\n            throw new IllegalArgumentException(\"User cannot be null\");\n        }\n        \n        if (user.getId() == null) {\n            user.setId(idGenerator.getAndIncrement());\n        }\n        \n        users.put(user.getId(), user);\n        return user;\n    }\n    \n    @Override\n    public void deleteById(Long id) {\n        users.remove(id);\n    }\n    \n    @Override\n    public boolean existsById(Long id) {\n        return users.containsKey(id);\n    }\n    \n    @Override\n    public long count() {\n        return users.size();\n    }\n}\n"
    },
    {
      "language": "java",
      "relative_path": "src/main/java/com/example/user/UserService.java",
      "symbols": [
        {
          "symbol": "UserService",
          "kind": 7,
          "display_name": "UserService"
        }
      ],
      "text": "package com.example.user;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Service class for user management business logic.\n */\npublic class UserService {\n    \n    private final UserRepository userRepository;\n    \n    public UserService(UserRepository userRepository) {\n        this.userRepository = Objects.requireNonNull(userRepository, \n                                                    \"UserRepository cannot be null\");\n    }\n    \n    /**\n     * Create a new user.\n     */\n    public User createUser(String name, String email) {\n        validateUserInput(name, email);\n        \n        // Check if user with email already exists\n        Optional\u003cUser\u003e existingUser = userRepository.findByEmail(email);\n        if (existingUser.isPresent()) {\n            throw new IllegalArgumentException(\"User with email \" + email + \" already exists\");\n        }\n        \n        User user = new User(name, email);\n        return userRepository.save(user);\n    }\n    \n    /**\n     * Get user by ID.\n     */\n    public Optional\u003cUser\u003e getUserById(Long id) {\n        if (id == null || id \u003c= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n        return userRepository.findById(id);\n    }\n    \n    /**\n     * Get user by email.\n     */\n    public Optional\u003cUser\u003e getUserByEmail(String email) {\n        if (email == null || email.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Email cannot be null or empty\");\n        }\n        return userRepository.findByEmail(email.trim());\n    }\n    \n    /**\n     * Update user information.\n     */\n    public User updateUser(Long id, String name, String email) {\n        if (id == null || id \u003c= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n        \n        validateUserInput(name, email);\n        \n        Optional\u003cUser\u003e existingUser = userRepository.findById(id);\n        if (!existingUser.isPresent()) {\n            throw new IllegalArgumentException(\"User with ID \" + id + \" not found\");\n        }\n        \n        // Check if email is already taken by another user\n        Optional\u003cUser\u003e userWithEmail = userRepository.findByEmail(email);\n        if (userWithEmail.isPresent() \u0026\u0026 !userWithEmail.get().getId().equals(id)) {\n            throw new IllegalArgumentException(\"Email \" + email + \" is already taken\");\n        }\n        \n        User user = existingUser.get();\n        user.setName(name);\n        user.setEmail(email);\n        \n        return userRepository.save(user);\n    }\n    \n    /**\n     * Delete user by ID.\n     */\n    public boolean deleteUser(Long id) {\n        if (id == null || id \u003c= 0) {\n            throw new IllegalArgumentException(\"User ID must be positive\");\n        }\n        \n        if (!userRepository.existsById(id)) {\n            return false;\n        }\n        \n        userRepository.deleteById(id);\n        return true;\n    }\n    \n    /**\n     * Search users by name.\n     */\n    public List\u003cUser\u003e searchUsersByName(String name) {\n        return userRepository.findByNameContaining(name);\n    }\n    \n    /**\n     * Get all users.\n     */\n    public List\u003cUser\u003e getAllUsers() {\n        return userRepository.findAll();\n    }\n    \n    /**\n     * Get user count.\n     */\n    public long getUserCount() {\n        return userRepository.count();\n    }\n    \n    private void validateUserInput(String name, String email) {\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Name cannot be null or empty\");\n        }\n        \n        if (email == null || email.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Email cannot be null or empty\");\n        }\n        \n        if (!isValidEmail(email)) {\n            throw new IllegalArgumentException(\"Invalid email format\");\n        }\n    }\n    \n    private boolean isValidEmail(String email) {\n        return email.contains(\"@\") \u0026\u0026 email.contains(\".\");\n    }\n}\n"
    },
    {
      "language": "java",
      "relative_path": "src/test/java/com/example/user/UserServiceTest.java",
      "text": "package com.example.user;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.DisplayName;\nimport static org.junit.jupiter.api.Assertions.*;\n\nimport java.util.List;\nimport java.util.Optional;\n\n/**\n * Test class for UserService.\n */\nclass UserServiceTest {\n    \n    private UserRepository userRepository;\n    private UserService userService;\n    \n    @BeforeEach\n    void setUp() {\n        userRepository = new InMemoryUserRepository();\n        userService = new UserService(userRepository);\n    }\n    \n    @Test\n    @DisplayName(\"Should create user with valid data\")\n    void testCreateUser_ValidData() {\n        // Arrange\n        String name = \"John Doe\";\n        String email = \"john.doe@example.com\";\n        \n        // Act\n        User createdUser = userService.createUser(name, email);\n        \n        // Assert\n        assertNotNull(createdUser);\n        assertNotNull(createdUser.getId());\n        assertEquals(name, createdUser.getName());\n        assertEquals(email, createdUser.getEmail());\n        assertNotNull(createdUser.getCreated());\n    }\n    \n    @Test\n    @DisplayName(\"Should throw exception for invalid name\")\n    void testCreateUser_InvalidName() {\n        // Arrange \u0026 Act \u0026 Assert\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"\", \"john@example.com\"));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(null, \"john@example.com\"));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"   \", \"john@example.com\"));\n    }\n    \n    @Test\n    @DisplayName(\"Should throw exception for invalid email\")\n    void testCreateUser_InvalidEmail() {\n        // Arrange \u0026 Act \u0026 Assert\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"John\", \"\"));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"John\", null));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"John\", \"invalid-email\"));\n    }\n    \n    @Test\n    @DisplayName(\"Should throw exception for duplicate email\")\n    void testCreateUser_DuplicateEmail() {\n        // Arrange\n        String email = \"john@example.com\";\n        userService.createUser(\"John Doe\", email);\n        \n        // Act \u0026 Assert\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.createUser(\"Jane Doe\", email));\n    }\n    \n    @Test\n    @DisplayName(\"Should get user by ID\")\n    void testGetUserById() {\n        // Arrange\n        User createdUser = userService.createUser(\"John Doe\", \"john@example.com\");\n        \n        // Act\n        Optional\u003cUser\u003e foundUser = userService.getUserById(createdUser.getId());\n        \n        // Assert\n        assertTrue(foundUser.isPresent());\n        assertEquals(createdUser.getId(), foundUser.get().getId());\n        assertEquals(createdUser.getName(), foundUser.get().getName());\n    }\n    \n    @Test\n    @DisplayName(\"Should return empty for non-existent user ID\")\n    void testGetUserById_NotFound() {\n        // Act\n        Optional\u003cUser\u003e foundUser = userService.getUserById(999L);\n        \n        // Assert\n        assertFalse(foundUser.isPresent());\n    }\n    \n    @Test\n    @DisplayName(\"Should throw exception for invalid user ID\")\n    void testGetUserById_InvalidId() {\n        // Act \u0026 Assert\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.getUserById(null));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.getUserById(0L));\n        assertThrows(IllegalArgumentException.class, \n                    () -\u003e userService.getUserById(-1L));\n    }\n    \n    @Test\n    @DisplayName(\"Should update user successfully\")\n    void testUpdateUser() {\n        // Arrange\n        User createdUser = userService.createUser(\"John Doe\", \"john@example.com\");\n        String newName = \"John Smith\";\n        String newEmail = \"john.smith@example.com\";\n        \n        // Act\n        User updatedUser = userService.updateUser(createdUser.getId(), newName, newEmail);\n        \n        // Assert\n        assertEquals(createdUser.getId(), updatedUser.getId());\n        assertEquals(newName, updatedUser.getName());\n        assertEquals(newEmail, updatedUser.getEmail());\n    }\n    \n    @Test\n    @DisplayName(\"Should delete user successfully\")\n    void testDeleteUser() {\n        // Arrange\n        User createdUser = userService.createUser(\"John Doe\", \"john@example.com\");\n        \n        // Act\n        boolean deleted = userService.deleteUser(createdUser.getId());\n        \n        // Assert\n        assertTrue(deleted);\n        Optional\u003cUser\u003e foundUser = userService.getUserById(createdUser.getId());\n        assertFalse(foundUser.isPresent());\n    }\n    \n    @Test\n    @DisplayName(\"Should return false when deleting non-existent user\")\n    void testDeleteUser_NotFound() {\n        // Act\n        boolean deleted = userService.deleteUser(999L);\n        \n        // Assert\n        assertFalse(deleted);\n    }\n    \n    @Test\n    @DisplayName(\"Should search users by name\")\n    void testSearchUsersByName() {\n        // Arrange\n        userService.createUser(\"John Doe\", \"john@example.com\");\n        userService.createUser(\"Jane Doe\", \"jane@example.com\");\n        userService.createUser(\"Bob Smith\", \"bob@example.com\");\n        \n        // Act\n        List\u003cUser\u003e searchResults = userService.searchUsersByName(\"Doe\");\n        \n        // Assert\n        assertEquals(2, searchResults.size());\n        assertTrue(searchResults.stream().anyMatch(u -\u003e u.getName().equals(\"John Doe\")));\n        assertTrue(searchResults.stream().anyMatch(u -\u003e u.getName().equals(\"Jane Doe\")));\n    }\n    \n    @Test\n    @DisplayName(\"Should get all users\")\n    void testGetAllUsers() {\n        // Arrange\n        userService.createUser(\"John Doe\", \"john@example.com\");\n        userService.createUser(\"Jane Smith\", \"jane@example.com\");\n        \n        // Act\n        List\u003cUser\u003e allUsers = userService.getAllUsers();\n        \n        // Assert\n        assertEquals(2, allUsers.size());\n    }\n    \n    @Test\n    @DisplayName(\"Should get user count\")\n    void testGetUserCount() {\n        // Arrange\n        assertEquals(0, userService.getUserCount());\n        \n        userService.createUser(\"John Doe\", \"john@example.com\");\n        userService.createUser(\"Jane Smith\", \"jane@example.com\");\n        \n        // Act \u0026 Assert\n        assertEquals(2, userService.getUserCount());\n    }\n}\n"
    }
  ]
}
