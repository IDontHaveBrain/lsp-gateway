{
  "isIncomplete": false,
  "items": [
    {
      "label": "findUserById",
      "kind": 2,
      "detail": "User findUserById(Long id) throws UserNotFoundException",
      "documentation": {
        "kind": "markdown",
        "value": "Finds a user by their unique ID.\n\n**Parameters:**\n- `id` - The user ID to search for\n\n**Returns:**\n- `User` - The user entity if found\n\n**Throws:**\n- `UserNotFoundException` - If no user found with the given ID"
      },
      "insertText": "findUserById",
      "insertTextFormat": 1,
      "sortText": "0001"
    },
    {
      "label": "createUser",
      "kind": 2,
      "detail": "User createUser(String name, String email, String role)",
      "documentation": {
        "kind": "markdown",
        "value": "Creates a new user with the specified details.\n\n**Parameters:**\n- `name` - The user's full name\n- `email` - The user's email address\n- `role` - The user's role (USER, MODERATOR, ADMIN)\n\n**Returns:**\n- `User` - The created user entity"
      },
      "insertText": "createUser",
      "insertTextFormat": 1,
      "sortText": "0002"
    },
    {
      "label": "updateUser",
      "kind": 2,
      "detail": "User updateUser(Long id, String name, String email) throws UserNotFoundException",
      "documentation": {
        "kind": "markdown",
        "value": "Updates an existing user's information.\n\n**Parameters:**\n- `id` - The user ID to update\n- `name` - The new user name\n- `email` - The new user email\n\n**Returns:**\n- `User` - The updated user entity\n\n**Throws:**\n- `UserNotFoundException` - If no user found with the given ID"
      },
      "insertText": "updateUser",
      "insertTextFormat": 1,
      "sortText": "0003"
    },
    {
      "label": "deleteUser",
      "kind": 2,
      "detail": "void deleteUser(Long id) throws UserNotFoundException",
      "documentation": {
        "kind": "markdown",
        "value": "Deletes a user by their ID.\n\n**Parameters:**\n- `id` - The user ID to delete\n\n**Throws:**\n- `UserNotFoundException` - If no user found with the given ID"
      },
      "insertText": "deleteUser",
      "insertTextFormat": 1,
      "sortText": "0004"
    },
    {
      "label": "findAllUsers",
      "kind": 2,
      "detail": "List<User> findAllUsers()",
      "documentation": {
        "kind": "markdown",
        "value": "Retrieves all users from the system.\n\n**Returns:**\n- `List<User>` - A list of all user entities"
      },
      "insertText": "findAllUsers",
      "insertTextFormat": 1,
      "sortText": "0005"
    },
    {
      "label": "userRepository",
      "kind": 6,
      "detail": "UserRepository",
      "documentation": {
        "kind": "markdown",
        "value": "Spring Data JPA repository for User entity operations.\n\n**Type:** `UserRepository`\n\n**Autowired:** Yes"
      },
      "insertText": "userRepository",
      "insertTextFormat": 1,
      "sortText": "0006"
    },
    {
      "label": "findUsersByRole",
      "kind": 2,
      "detail": "List<User> findUsersByRole(UserRole role)",
      "documentation": {
        "kind": "markdown",
        "value": "Finds all users with the specified role.\n\n**Parameters:**\n- `role` - The user role to filter by\n\n**Returns:**\n- `List<User>` - A list of users with the specified role"
      },
      "insertText": "findUsersByRole",
      "insertTextFormat": 1,
      "sortText": "0007"
    },
    {
      "label": "isAdminUser",
      "kind": 2,
      "detail": "boolean isAdminUser(User user)",
      "documentation": {
        "kind": "markdown",
        "value": "Checks if the given user has admin privileges.\n\n**Parameters:**\n- `user` - The user to check\n\n**Returns:**\n- `boolean` - True if user is an admin, false otherwise"
      },
      "insertText": "isAdminUser",
      "insertTextFormat": 1,
      "sortText": "0008"
    },
    {
      "label": "countActiveUsers",
      "kind": 2,
      "detail": "long countActiveUsers()",
      "documentation": {
        "kind": "markdown",
        "value": "Counts the number of active users in the system.\n\n**Returns:**\n- `long` - The count of active users"
      },
      "insertText": "countActiveUsers",
      "insertTextFormat": 1,
      "sortText": "0009"
    },
    {
      "label": "searchUsersByName",
      "kind": 2,
      "detail": "List<User> searchUsersByName(String namePattern)",
      "documentation": {
        "kind": "markdown",
        "value": "Searches for users by name pattern (case-insensitive).\n\n**Parameters:**\n- `namePattern` - The name pattern to search for\n\n**Returns:**\n- `List<User>` - A list of users matching the name pattern"
      },
      "insertText": "searchUsersByName",
      "insertTextFormat": 1,
      "sortText": "0010"
    },
    {
      "label": "UserRole",
      "kind": 8,
      "detail": "enum UserRole",
      "documentation": {
        "kind": "markdown",
        "value": "Enumeration of user roles with permissions.\n\n**Values:**\n- `USER` - Basic user privileges\n- `MODERATOR` - Moderator privileges\n- `ADMIN` - Full administrative privileges\n\n**Methods:**\n- `hasPermission(Permission)` - Check if role has specific permission\n- `fromString(String)` - Parse role from string"
      },
      "insertText": "UserRole",
      "insertTextFormat": 1,
      "sortText": "0011"
    },
    {
      "label": "UserNotFoundException",
      "kind": 7,
      "detail": "class UserNotFoundException",
      "documentation": {
        "kind": "markdown",
        "value": "Custom exception thrown when a user is not found.\n\n**Annotations:**\n- `@ResponseStatus(HttpStatus.NOT_FOUND)`\n\n**Constructors:**\n- `UserNotFoundException(String message)`\n- `UserNotFoundException(String message, Long userId)`\n- `UserNotFoundException(String message, String userEmail)`"
      },
      "insertText": "UserNotFoundException",
      "insertTextFormat": 1,
      "sortText": "0012"
    }
  ]
}