# Python Patterns E2E Test Configuration
# Optimized for testing Python LSP features with PythonRepoManager
# Supports: definition, references, hover, document symbols, workspace symbols, completion

# Gateway configuration for test scenarios
port: ${TEST_PORT:-8080}
timeout: "30s"
max_concurrent_requests: 50
project_aware: true
enable_concurrent_servers: false  # Simplified for testing
max_concurrent_servers_per_language: 2

# Test project context for Python patterns repository
project_context:
  project_type: "single-language"
  root_directory: "${workspaceFolder}"
  languages:
    - language: "python"
      frameworks: ["patterns", "design_patterns", "examples"]
      file_patterns: ["*.py"]
      root_markers: ["patterns/", "*.py", "__init__.py"]

# Python language server pool optimized for testing
language_pools:
  - language: "python"
    default_server: "pylsp-test"
    servers:
      # Primary test server with essential features
      pylsp-test:
        name: "pylsp-test"
        languages: ["python"]
        command: "pylsp"
        transport: "stdio"
        priority: 3
        weight: 3.0
        max_concurrent_requests: 30
        root_markers: ["patterns/", "*.py"]
        
        # Test-optimized pylsp configuration
        settings:
          pylsp:
            plugins:
              # Core LSP features for testing
              jedi_completion:
                enabled: true
                include_params: true
                include_class_objects: true
                include_function_objects: true
                fuzzy: false  # Disabled for predictable testing
                eager: false  # Faster startup
                resolve_at_most: 15
                
              jedi_definition:
                enabled: true
                follow_imports: true
                follow_builtin_imports: false  # Faster for tests
                
              jedi_hover:
                enabled: true
                
              jedi_references:
                enabled: true
                
              jedi_symbols:
                enabled: true
                all_scopes: true
                include_import_symbols: false  # Simplified for tests
                
              # Minimal linting for test stability
              pycodestyle:
                enabled: true
                ignore: ["E501", "W503", "E203", "E731", "W605"]  # Relaxed for pattern examples
                maxLineLength: 120
                
              pyflakes:
                enabled: true
                
              # Disable heavy plugins for test performance
              pylint:
                enabled: false
              mypy:
                enabled: false
              black:
                enabled: false
              isort:
                enabled: false
              pydocstyle:
                enabled: false
                
        # Test environment
        environment:
          PYTHONPATH: "${workspaceFolder}:${workspaceFolder}/patterns"
          PYTHONDONTWRITEBYTECODE: "1"
          PYTHONUNBUFFERED: "1"
          
      # Fallback server for error scenarios
      pylsp-fallback:
        name: "pylsp-fallback"
        languages: ["python"]
        command: "pylsp"
        args: ["--check-parent-process"]
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 20
        root_markers: ["*.py"]
        
        # Minimal configuration for fallback
        settings:
          pylsp:
            plugins:
              jedi_completion:
                enabled: true
                resolve_at_most: 5
              jedi_definition:
                enabled: true
              jedi_hover:
                enabled: true
              pycodestyle:
                enabled: false
              pyflakes:
                enabled: false
                
        environment:
          PYTHONPATH: "${workspaceFolder}"
          
    # Load balancing for test scenarios
    load_balancing:
      strategy: "round_robin"  # Predictable for testing
      health_threshold: 0.70
      weight_factors:
        pylsp-test: 3.0
        pylsp-fallback: 1.0
        
    # Resource limits for test environment
    resource_limits:
      max_memory_mb: 1024  # Lower for test environment
      max_concurrent_requests: 50
      max_processes: 3
      request_timeout_seconds: 30

# Enhanced pool configuration for Python test servers
servers:
  - name: "python-patterns-test-pool"
    languages: ["python"]
    command: "python"
    args: ["-m", "pylsp"]
    transport: "stdio"
    root_markers: ["patterns/", "*.py"]
    
    # Pool configuration optimized for testing
    pool_config:
      min_size: 1
      max_size: 3
      warmup_size: 1
      
      # Conservative scaling for test stability
      enable_dynamic_sizing: false  # Fixed pool for predictable tests
      
      # Test-appropriate lifecycle
      max_lifetime: 15m  # Shorter for tests
      idle_timeout: 5m
      health_check_interval: 30s
      
      # Retry configuration for test reliability
      max_retries: 3
      base_delay: 100ms
      circuit_timeout: 15s
      
      # Memory limits for test environment
      memory_limit_mb: 512
      cpu_limit_percent: 50.0
      
      transport_type: "stdio"
      custom_config:
        process_isolation: true
        virtual_env_support: false  # Simplified for tests
        test_mode: true
        
    # Health monitoring for test stability
    health_check_settings:
      enabled: true
      interval: 30s
      timeout: 10s
      failure_threshold: 2
      success_threshold: 1
      method: "ping"
      enable_auto_restart: true
      restart_delay: 5s
      max_consecutive_fails: 2
      
    # Test environment
    environment:
      PYTHONPATH: "${workspaceFolder}:${workspaceFolder}/patterns"
      PYTHONDONTWRITEBYTECODE: "1"
      PYTHONUNBUFFERED: "1"

# Smart routing optimized for test scenarios
enable_smart_routing: true
enable_enhancements: false  # Simplified for testing
smart_router_config:
  default_strategy: "single_target_with_fallback"
  method_strategies:
    "textDocument/definition": "single_target_with_fallback"
    "textDocument/references": "single_target_with_fallback"
    "textDocument/hover": "single_target_with_fallback"
    "textDocument/completion": "single_target_with_fallback"
    "textDocument/documentSymbol": "single_target_with_fallback"
    "workspace/symbol": "single_target_with_fallback"
  enable_performance_monitoring: true
  enable_circuit_breaker: true
  circuit_breaker_threshold: 3
  circuit_breaker_timeout: "15s"

# Test-specific optimizations
optimizations:
  python:
    # Virtual environment disabled for test simplicity
    virtual_env:
      auto_detect: false
      
    # Python patterns project structure
    project_structure:
      patterns_directory: "patterns"
      examples_directory: "patterns"
      test_directory: "tests"
      
    # Package management disabled for tests
    package_managers: []
    
    # Code quality tools disabled for test performance
    linting: []
    
    # Testing frameworks (minimal)
    testing:
      - name: "unittest"
        enabled: true
        
# Test repository configurations for different Python project types
test_repositories:
  # Main python-patterns repository
  python_patterns:
    repo_url: "https://github.com/faif/python-patterns.git"
    workspace_path: "${TEST_WORKSPACE}/python-patterns"
    patterns_dir: "patterns"
    test_files_pattern: "patterns/**/*.py"
    
  # Django-style patterns (if needed for comprehensive testing)
  django_patterns:
    workspace_path: "${TEST_WORKSPACE}/django-patterns"
    patterns_dir: "patterns/django"
    test_files_pattern: "patterns/django/**/*.py"
    
  # FastAPI-style patterns
  api_patterns:
    workspace_path: "${TEST_WORKSPACE}/api-patterns"
    patterns_dir: "patterns/api"
    test_files_pattern: "patterns/api/**/*.py"

# Test-optimized SCIP performance configuration
performance_config:
  # SCIP disabled for test simplicity and speed
  scip:
    enabled: false
    
  # Test-focused caching
  cache:
    enabled: true
    memory_limit: "256MB"  # Smaller for test environment
    ttl: "30m"  # Shorter for test runs
    
  # Test monitoring
  monitoring:
    enabled: true
    collect_detailed_metrics: false  # Simplified for tests

# Logging configuration for test scenarios
logging:
  level: "info"
  enable_request_logging: true
  enable_performance_logging: true
  levels:
    pylsp: "info"
    patterns: "info"
    test_runner: "debug"

# Test-specific settings
test_settings:
  # Timeout settings optimized for test scenarios
  timeouts:
    server_startup: "15s"
    lsp_request: "10s"
    definition: "5s"
    references: "8s"
    hover: "3s"
    completion: "5s"
    document_symbols: "5s"
    workspace_symbols: "10s"
    
  # Performance expectations for tests
  performance:
    max_response_time_ms: 5000
    max_memory_usage_mb: 512
    max_startup_time_ms: 15000
    
  # Test file patterns
  file_patterns:
    include:
      - "patterns/**/*.py"
      - "*.py"
    exclude:
      - "__pycache__/**"
      - "*.pyc"
      - ".git/**"
      - ".pytest_cache/**"
      
  # LSP method validation
  supported_methods:
    - "textDocument/definition"
    - "textDocument/references" 
    - "textDocument/hover"
    - "textDocument/completion"
    - "textDocument/documentSymbol"
    - "workspace/symbol"
    
  # Test data expectations
  test_expectations:
    min_python_files: 10  # Minimum files expected in patterns directory
    expected_patterns:
      - "patterns/behavioral"
      - "patterns/creational"
      - "patterns/structural"
    required_symbols:
      - "class"
      - "function"
      - "method"

# Integration with PythonRepoManager
repo_manager_integration:
  # Repository management settings
  repository:
    clone_timeout: "300s"  # 5 minutes for network operations
    checkout_timeout: "60s"
    validation_timeout: "30s"
    
  # Workspace management
  workspace:
    base_dir: "/tmp/lsp-gateway-python-e2e-tests"
    cleanup_on_exit: true
    preserve_on_error: false  # Clean up even on errors for tests
    
  # File discovery settings
  file_discovery:
    patterns_dir: "patterns"
    recursive: true
    include_init_files: true
    max_files: 500  # Reasonable limit for test scenarios

# Error handling and recovery for tests
error_handling:
  # Test-appropriate error recovery
  recovery:
    max_retry_attempts: 2  # Fewer retries for faster test feedback
    retry_delay: "2s"
    exponential_backoff: false  # Linear for predictable test timing
    
  # Error reporting for test diagnostics
  reporting:
    log_all_errors: true
    include_stack_traces: true
    error_context_size: 3  # Lines of context around errors
    
  # Bypass strategies for test stability
  bypass_strategies:
    server_failure: "fallback_server"
    timeout: "fail_fast"
    memory_limit: "restart_server"