# Go LSP E2E Test Configuration
# Optimized for testing Go LSP features with golang/example repository
# Supports: definition, references, hover, document symbols, workspace symbols, completion

# Gateway configuration for test scenarios
port: ${TEST_PORT:-8080}
timeout: "30s"
max_concurrent_requests: 50
project_aware: true
enable_concurrent_servers: false
max_concurrent_servers_per_language: 2

# Test project context for golang/example repository
project_context:
  project_type: "test_repository"
  languages:
    - language: "go"
      frameworks: ["stdlib", "example"]
      file_patterns: ["*.go", "go.mod", "go.sum"]
      root_markers: ["go.mod", "go.sum"]

# Go language server pool optimized for testing
language_pools:
  - language: "go"
    default_server: "gopls-test"
    servers:
      # Primary test server with essential features
      gopls-test:
        name: "gopls-test"
        languages: ["go"]
        command: "gopls"
        args: ["serve"]
        transport: "stdio"
        priority: 3
        weight: 3.0
        max_concurrent_requests: 30
        root_markers: ["go.mod", "go.sum"]
        
        # Test-optimized gopls configuration
        settings:
          gopls:
            # Essential analyses for testing
            analyses:
              unusedparams: true
              shadow: false
              nilness: true
              unusedresult: false
              
            # Basic features for tests
            staticcheck: false
            gofumpt: false
            
            # Code lenses for test scenarios
            codelenses:
              test: true
              generate: false
              gc_details: false
              
            # Test-friendly build settings
            buildFlags: []
            memoryMode: "Normal"
            
            # Core features
            semanticTokens: true
            linksInHover: true
            usePlaceholders: true
            completeFunctionCalls: true
            
        # Test environment
        environment:
          GOPROXY: "https://proxy.golang.org,direct"
          GOSUMDB: "sum.golang.org"
          GOFLAGS: "-mod=readonly"
          GOMAXPROCS: "2"
          
      # Fallback server for error scenarios
      gopls-fallback:
        name: "gopls-fallback"
        languages: ["go"]
        command: "gopls"
        args: ["serve"]
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 20
        root_markers: ["go.mod"]
        
        # Minimal configuration for fallback
        settings:
          gopls:
            analyses:
              unusedparams: false
            staticcheck: false
            codelenses:
              test: false
            memoryMode: "DegradeClosed"
            
        environment:
          GOMAXPROCS: "1"
          
    # Load balancing for test scenarios
    load_balancing:
      strategy: "round_robin"
      health_threshold: 0.70
      weight_factors:
        gopls-test: 3.0
        gopls-fallback: 1.0
        
    # Resource limits for test environment
    resource_limits:
      max_memory_mb: 1024
      max_concurrent_requests: 50
      max_processes: 3
      request_timeout_seconds: 30

# Enhanced pool configuration for Go test servers
servers:
  - name: "go-example-test-pool"
    languages: ["go"]
    command: "gopls"
    args: ["serve"]
    transport: "stdio"
    root_markers: ["go.mod", "go.sum"]
    
    # Pool configuration optimized for testing
    pool_config:
      min_size: 1
      max_size: 3
      warmup_size: 1
      
      # Conservative scaling for test stability
      enable_dynamic_sizing: false
      
      # Test-appropriate lifecycle
      max_lifetime: 15m
      idle_timeout: 5m
      health_check_interval: 30s
      
      # Retry configuration for test reliability
      max_retries: 3
      base_delay: 100ms
      circuit_timeout: 15s
      
      # Memory limits for test environment
      memory_limit_mb: 512
      cpu_limit_percent: 50.0
      
      transport_type: "stdio"
      custom_config:
        process_isolation: true
        test_mode: true
        
    # Health monitoring for test stability
    health_check_settings:
      enabled: true
      interval: 30s
      timeout: 10s
      failure_threshold: 2
      success_threshold: 1
      method: "initialize"
      enable_auto_restart: true
      restart_delay: 5s
      max_consecutive_fails: 2
      
    # Test environment
    environment:
      GOPROXY: "https://proxy.golang.org,direct"
      GOSUMDB: "sum.golang.org"
      GOFLAGS: "-mod=readonly"
      GOMAXPROCS: "2"

# Smart routing optimized for test scenarios
enable_smart_routing: true
enable_enhancements: false
smart_router_config:
  default_strategy: "single_target_with_fallback"
  method_strategies:
    "textDocument/definition": "single_target_with_fallback"
    "textDocument/references": "single_target_with_fallback"
    "textDocument/hover": "single_target_with_fallback"
    "textDocument/completion": "single_target_with_fallback"
    "textDocument/documentSymbol": "single_target_with_fallback"
    "workspace/symbol": "single_target_with_fallback"
  enable_performance_monitoring: true
  enable_circuit_breaker: true
  circuit_breaker_threshold: 3
  circuit_breaker_timeout: "15s"

# Test-specific optimizations
optimizations:
  go:
    # Go modules handling
    modules:
      auto_detect: true
      vendor_support: false
      
    # golang/example project structure
    project_structure:
      source_directories: [".", "cmd", "pkg", "internal"]
      
    # Build tools for tests
    build_tools:
      - name: "go_modules"
        enabled: true
        settings:
          auto_tidy: false
          
    # Code quality tools disabled for test performance
    linting: []
    
    # Testing frameworks (minimal)
    testing:
      - name: "go_test"
        enabled: true

# Test repository configurations for Go projects
test_repositories:
  # Main golang/example repository
  golang_example:
    repo_url: "https://github.com/golang/example.git"
    workspace_path: "${TEST_WORKSPACE}/example"
    source_dirs: [".", "cmd", "pkg", "internal"]
    test_files_pattern: "**/*.go"
    commit_hash: "${COMMIT_HASH:-8b40562}"

# Test-optimized SCIP performance configuration
performance_config:
  # SCIP disabled for test simplicity and speed
  scip:
    enabled: false
    
  # Test-focused caching
  cache:
    enabled: true
    memory_limit: "256MB"
    ttl: "30m"
    
  # Test monitoring
  monitoring:
    enabled: true
    collect_detailed_metrics: false

# Logging configuration for test scenarios
logging:
  level: "info"
  enable_request_logging: true
  enable_performance_logging: true
  levels:
    gopls: "info"
    golang_example: "info"
    test_runner: "debug"

# MCP-specific configuration
mcp:
  enabled: true
  tools:
    - "textDocument/definition"
    - "textDocument/references"
    - "textDocument/hover"
    - "textDocument/documentSymbol"
    - "workspace/symbol"
    - "textDocument/completion"
  
  # MCP transport settings
  transport:
    type: "stdio"
    timeout: "30s"
    
  # MCP protocol settings
  protocol:
    version: "2025-06-18"
    capabilities:
      tools: true
      resources: false
      prompts: false

# Test-specific settings
test_settings:
  # Timeout settings optimized for test scenarios
  timeouts:
    server_startup: "15s"
    lsp_request: "10s"
    definition: "5s"
    references: "8s"
    hover: "3s"
    completion: "5s"
    document_symbols: "5s"
    workspace_symbols: "10s"
    
  # Performance expectations for tests
  performance:
    max_response_time_ms: 5000
    max_memory_usage_mb: 512
    max_startup_time_ms: 15000
    
  # Test file patterns
  file_patterns:
    include:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
    exclude:
      - "vendor/**"
      - ".git/**"
      - "testdata/**"
      - "*_test.go"
      
  # LSP method validation
  supported_methods:
    - "textDocument/definition"
    - "textDocument/references" 
    - "textDocument/hover"
    - "textDocument/completion"
    - "textDocument/documentSymbol"
    - "workspace/symbol"
    
  # Test data expectations
  test_expectations:
    min_go_files: 3
    expected_directories:
      - "."
    required_symbols:
      - "func"
      - "package"
      - "type"
      - "var"

# Integration with repository manager
repo_manager_integration:
  # Repository management settings
  repository:
    clone_timeout: "300s"
    checkout_timeout: "60s"
    validation_timeout: "30s"
    
  # Workspace management
  workspace:
    base_dir: "/tmp/lspg-go-e2e-tests"
    cleanup_on_exit: true
    preserve_on_error: false
    
  # File discovery settings
  file_discovery:
    source_dirs: [".", "cmd", "pkg", "internal"]
    recursive: true
    include_go_files: true
    max_files: 200

# Error handling and recovery for tests
error_handling:
  # Test-appropriate error recovery
  recovery:
    max_retry_attempts: 2
    retry_delay: "2s"
    exponential_backoff: false
    
  # Error reporting for test diagnostics
  reporting:
    log_all_errors: true
    include_stack_traces: true
    error_context_size: 3
    
  # Bypass strategies for test stability
  bypass_strategies:
    server_failure: "fallback_server"
    timeout: "fail_fast"
    memory_limit: "restart_server"