# Example Multi-Server Configuration for LSP Gateway
# This demonstrates the enhanced configuration system with multi-server support

port: 8080
timeout: "30s"
max_concurrent_requests: 200
project_aware: true
enable_concurrent_servers: true
max_concurrent_servers_per_language: 3

# Global multi-server configuration
multi_server_config:
  selection_strategy: "load_balance"
  concurrent_limit: 3
  resource_sharing: true
  health_check_interval: "30s"
  max_retries: 3

# Traditional single-server configuration (for backward compatibility)
servers:
  - name: "java-lsp"
    languages: ["java"]
    command: "jdtls"
    transport: "stdio"
    priority: 1
    weight: 1.0

# Advanced multi-server language pools
language_pools:
  # Go language server pool with multiple servers
  - language: "go"
    default_server: "gopls-primary"
    servers:
      gopls-primary:
        name: "gopls-primary"
        languages: ["go"]
        command: "gopls"
        transport: "stdio"
        priority: 2
        weight: 2.0
        max_concurrent_requests: 100
        health_check_endpoint: "http://localhost:9090/health"
        root_markers: ["go.mod", "go.sum"]
        settings:
          gopls:
            analyses:
              unusedparams: true
              shadow: true
            staticcheck: true
      gopls-secondary:
        name: "gopls-secondary"
        languages: ["go"]
        command: "gopls"
        args: ["--mode=lightweight"]
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 50
        root_markers: ["go.mod", "go.sum"]
        settings:
          gopls:
            analyses:
              unusedparams: false
    load_balancing:
      strategy: "round_robin"
      health_threshold: 0.8
      weight_factors:
        gopls-primary: 2.0
        gopls-secondary: 1.0
    resource_limits:
      max_memory_mb: 2048
      max_concurrent_requests: 150
      max_processes: 5
      request_timeout_seconds: 60

  # Python language server pool with performance-based selection
  - language: "python"
    default_server: "pylsp-fast"
    servers:
      pylsp-fast:
        name: "pylsp-fast"
        languages: ["python"]
        command: "pylsp"
        args: ["--tcp", "--port", "2087"]
        transport: "tcp"
        priority: 3
        weight: 3.0
        max_concurrent_requests: 80
        root_markers: ["pyproject.toml", "setup.py", "requirements.txt"]
        settings:
          pylsp:
            plugins:
              pycodestyle:
                enabled: true
              pylint:
                enabled: false
      pylsp-complete:
        name: "pylsp-complete"
        languages: ["python"] 
        command: "pylsp"
        transport: "stdio"
        priority: 2
        weight: 2.0
        max_concurrent_requests: 60
        root_markers: ["pyproject.toml", "setup.py", "requirements.txt"]
        settings:
          pylsp:
            plugins:
              pycodestyle:
                enabled: true
              pylint:
                enabled: true
              mypy:
                enabled: true
      pylsp-basic:
        name: "pylsp-basic"
        languages: ["python"]
        command: "pylsp"
        args: ["--minimal"]
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 40
        root_markers: ["pyproject.toml", "setup.py", "requirements.txt"]
    load_balancing:
      strategy: "response_time"
      health_threshold: 0.9
      weight_factors:
        pylsp-fast: 3.0
        pylsp-complete: 2.0
        pylsp-basic: 1.0
    resource_limits:
      max_memory_mb: 1536
      max_concurrent_requests: 180
      max_processes: 3
      request_timeout_seconds: 45

  # TypeScript/JavaScript pool with load balancing
  - language: "typescript"
    default_server: "tsserver-main"
    servers:
      tsserver-main:
        name: "tsserver-main"
        languages: ["typescript", "javascript"]
        command: "typescript-language-server"
        args: ["--stdio"]
        transport: "stdio"
        priority: 2
        weight: 2.0
        max_concurrent_requests: 120
        root_markers: ["tsconfig.json", "package.json"]
        settings:
          typescript:
            preferences:
              disableSuggestions: false
              includeCompletionsForModuleExports: true
      tsserver-backup:
        name: "tsserver-backup"
        languages: ["typescript", "javascript"]
        command: "typescript-language-server"
        args: ["--stdio", "--log-level", "info"]
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 80
        root_markers: ["tsconfig.json", "package.json"]
    load_balancing:
      strategy: "least_connections"
      health_threshold: 0.85
      weight_factors:
        tsserver-main: 2.0
        tsserver-backup: 1.0
    resource_limits:
      max_memory_mb: 3072
      max_concurrent_requests: 200
      max_processes: 4
      request_timeout_seconds: 30

  # Rust language server pool  
  - language: "rust"
    default_server: "rust-analyzer"
    servers:
      rust-analyzer:
        name: "rust-analyzer"
        languages: ["rust"]
        command: "rust-analyzer"
        transport: "stdio"
        priority: 1
        weight: 1.0
        max_concurrent_requests: 60
        root_markers: ["Cargo.toml", "Cargo.lock"]
        settings:
          rust-analyzer:
            checkOnSave:
              command: "clippy"
            cargo:
              allFeatures: true
    load_balancing:
      strategy: "round_robin"
      health_threshold: 0.8
    resource_limits:
      max_memory_mb: 4096
      max_concurrent_requests: 60
      max_processes: 2
      request_timeout_seconds: 90