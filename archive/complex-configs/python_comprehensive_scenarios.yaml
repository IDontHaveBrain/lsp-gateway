# Comprehensive Python Language Test Scenarios for LSP Gateway
# Advanced real-world test cases using Django, Flask, and complex Python patterns
# Covers all 5 LSP features with extensive Python-specific scenarios

name: "Python Comprehensive LSP Scenarios"
description: "Exhaustive Python language server testing scenarios with Django/Flask patterns, metaclasses, decorators, and complex inheritance"
language: "python"
version: "2.0"
tags: ["comprehensive", "python", "django", "flask", "advanced"]

# Test scenarios for Python covering all LSP features comprehensively
scenarios:
  # ===============================================
  # DEFINITION SCENARIOS - COMPREHENSIVE COVERAGE
  # ===============================================
  
  - id: "py_def_django_model_inheritance"
    name: "Go to Definition - Django Model Multiple Inheritance"
    description: "Navigate through complex Django model inheritance hierarchy"
    method: "textDocument/definition"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position: 
      line: 321  # AbstractUser class inheritance
      character: 15
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "django/contrib/auth/base_user.py"
    tags: ["definition", "inheritance", "django", "model", "auth"]
  
  - id: "py_def_django_metaclass"
    name: "Go to Definition - Django Model Metaclass"
    description: "Navigate to Django ModelBase metaclass definition"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 78  # ModelBase metaclass reference
      character: 20
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "django/db/models/base.py"
    tags: ["definition", "metaclass", "django", "advanced"]
    
  - id: "py_def_django_field_descriptor"
    name: "Go to Definition - Django Field Descriptor"
    description: "Navigate to Django field descriptor implementation"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/fields/__init__.py"
    position:
      line: 450  # Field descriptor __get__ method
      character: 12
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "descriptor", "django", "field"]

  - id: "py_def_django_queryset_manager"
    name: "Go to Definition - Django QuerySet Manager"
    description: "Navigate from model to custom manager definition"
    method: "textDocument/definition"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 146  # UserManager reference
      character: 18
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "manager", "django", "queryset"]

  - id: "py_def_django_signal_decorator"
    name: "Go to Definition - Django Signal Decorator"
    description: "Navigate to Django signal receiver decorator"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/signals.py"
    position:
      line: 15  # pre_save signal definition
      character: 10
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "signal", "decorator", "django"]
    
  - id: "py_def_flask_blueprint_registration"
    name: "Go to Definition - Flask Blueprint Registration"
    description: "Navigate to Flask blueprint registration method"
    method: "textDocument/definition"
    repository: "flask"
    file: "src/flask/blueprints.py"
    position:
      line: 410  # Blueprint.register method
      character: 15
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "flask", "blueprint", "registration"]

  - id: "py_def_flask_context_globals"
    name: "Go to Definition - Flask Context Globals"
    description: "Navigate to Flask context global variables (g, request, session)"
    method: "textDocument/definition"
    repository: "flask"
    file: "src/flask/globals.py"
    position:
      line: 55  # request proxy definition
      character: 10
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "flask", "context", "globals"]

  - id: "py_def_dynamic_import"
    name: "Go to Definition - Dynamic Import Resolution"
    description: "Navigate to dynamically imported module"
    method: "textDocument/definition"
    repository: "django"
    file: "django/utils/module_loading.py"
    position:
      line: 25  # import_string function
      character: 15
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "dynamic", "import", "module"]

  - id: "py_def_property_decorator"
    name: "Go to Definition - Property Decorator Implementation"
    description: "Navigate to @property decorator implementation"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 520  # Model property method
      character: 8
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "property", "decorator", "builtin"]

  - id: "py_def_mixin_class"
    name: "Go to Definition - Mixin Class Navigation"
    description: "Navigate to mixin class definition in inheritance chain"
    method: "textDocument/definition"
    repository: "django"
    file: "django/views/generic/detail.py"
    position:
      line: 75  # SingleObjectMixin
      character: 25
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "django/views/generic/detail.py"
    tags: ["definition", "mixin", "class", "generic"]

  # =============================================
  # REFERENCES SCENARIOS - COMPREHENSIVE COVERAGE
  # =============================================
  
  - id: "py_ref_django_model_comprehensive"
    name: "Find References - Django Model Comprehensive Usage"
    description: "Find all references to Django User model across entire codebase"
    method: "textDocument/references"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 321  # AbstractUser class definition
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 100  # User model is extensively referenced
        include_declaration: true
    tags: ["references", "django", "model", "comprehensive"]

  - id: "py_ref_django_orm_method_usage"
    name: "Find References - Django ORM Method Usage"
    description: "Find all usages of Django ORM save method"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 753  # Model.save method definition
      character: 12
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 50  # save() is widely used
        include_declaration: true
    tags: ["references", "django", "orm", "method"]

  - id: "py_ref_django_field_types"
    name: "Find References - Django Field Types Usage"
    description: "Find all references to specific Django field types"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/fields/__init__.py"
    position:
      line: 1180  # CharField class definition
      character: 10
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 80  # CharField is widely used
        include_declaration: false
    tags: ["references", "django", "field", "types"]

  - id: "py_ref_django_signal_connections"
    name: "Find References - Django Signal Connections"
    description: "Find all signal receiver connections"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/signals.py"
    position:
      line: 15  # pre_save signal
      character: 10
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 20
        include_declaration: true
    tags: ["references", "django", "signals", "connections"]

  - id: "py_ref_flask_app_instance"
    name: "Find References - Flask App Instance Usage"
    description: "Find all references to Flask app instance"
    method: "textDocument/references"
    repository: "flask"
    file: "src/flask/app.py"
    position:
      line: 275  # Flask class constructor
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 30
        include_declaration: true
    tags: ["references", "flask", "app", "instance"]

  - id: "py_ref_flask_route_decorator"
    name: "Find References - Flask Route Decorator Usage"
    description: "Find all usages of @app.route decorator"
    method: "textDocument/references"
    repository: "flask"
    file: "src/flask/app.py"
    position:
      line: 1380  # route method definition
      character: 12
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 15
        include_declaration: false
    tags: ["references", "flask", "route", "decorator"]

  - id: "py_ref_metaclass_usage"
    name: "Find References - Metaclass Usage Pattern"
    description: "Find all classes using specific metaclass"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 78  # ModelBase metaclass
      character: 12
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 25  # Multiple models use this metaclass
        include_declaration: false
    tags: ["references", "metaclass", "pattern", "advanced"]

  - id: "py_ref_abstract_method"
    name: "Find References - Abstract Method Implementation"
    description: "Find all implementations of abstract method"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/backends/base/base.py"
    position:
      line: 150  # Abstract method in base database backend
      character: 15
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 10  # Different backend implementations
        include_declaration: false
    tags: ["references", "abstract", "method", "implementation"]

  # =========================================
  # HOVER SCENARIOS - COMPREHENSIVE COVERAGE
  # =========================================
  
  - id: "py_hover_django_model_field_detailed"
    name: "Hover - Django Model Field Detailed Info"
    description: "Get comprehensive hover info for Django model field with all parameters"
    method: "textDocument/hover"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 330  # username field in AbstractUser
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["CharField", "max_length", "unique", "username"]
        format: "markdown"
        min_lines: 3
    tags: ["hover", "django", "model", "field", "detailed"]

  - id: "py_hover_django_queryset_methods"
    name: "Hover - Django QuerySet Method Signature"
    description: "Get hover info for Django QuerySet method with complex signature"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/query.py"
    position:
      line: 925  # QuerySet.filter method
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["filter", "QuerySet", "Q", "kwargs"]
        format: "markdown"
        min_lines: 4
    tags: ["hover", "django", "queryset", "method"]

  - id: "py_hover_django_decorator_chain"
    name: "Hover - Django Decorator Chain Info"
    description: "Get hover info for complex Django decorator chain"
    method: "textDocument/hover"
    repository: "django"
    file: "django/views/decorators/cache.py"
    position:
      line: 45  # cache_page decorator
      character: 12
    expected:
      success: true
      hover:
        has_content: true
        contains: ["cache_page", "decorator", "timeout", "cache"]
        format: "markdown"
    tags: ["hover", "django", "decorator", "chain"]

  - id: "py_hover_flask_app_configuration"
    name: "Hover - Flask App Configuration Options"
    description: "Get hover info for Flask app configuration attributes"
    method: "textDocument/hover"
    repository: "flask"
    file: "src/flask/app.py"
    position:
      line: 320  # Flask.config attribute
      character: 25
    expected:
      success: true
      hover:
        has_content: true
        contains: ["config", "Config", "dict", "configuration"]
        format: "markdown"
    tags: ["hover", "flask", "config", "app"]

  - id: "py_hover_flask_request_context"
    name: "Hover - Flask Request Context Details"
    description: "Get hover info for Flask request context object"
    method: "textDocument/hover"
    repository: "flask"
    file: "src/flask/ctx.py"
    position:
      line: 245  # RequestContext class
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["RequestContext", "request", "app", "context"]
        format: "markdown"
        min_lines: 5
    tags: ["hover", "flask", "request", "context"]

  - id: "py_hover_python_magic_method"
    name: "Hover - Python Magic Method Documentation"
    description: "Get hover info for Python magic methods (__str__, __repr__, etc.)"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 550  # Model.__str__ method
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["__str__", "string", "representation", "object"]
        format: "markdown"
    tags: ["hover", "python", "magic", "method"]

  - id: "py_hover_property_with_setter"
    name: "Hover - Property with Setter Documentation"
    description: "Get hover info for Python property with getter/setter"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 480  # Model property with setter
      character: 18
    expected:
      success: true
      hover:
        has_content: true
        contains: ["property", "getter", "setter", "descriptor"]
        format: "markdown"
    tags: ["hover", "property", "setter", "descriptor"]

  - id: "py_hover_class_method_staticmethod"
    name: "Hover - Class Method and Static Method"
    description: "Get hover info for @classmethod and @staticmethod decorators"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 350  # classmethod in Model
      character: 8
    expected:
      success: true
      hover:
        has_content: true
        contains: ["classmethod", "cls", "class", "method"]
        format: "markdown"
    tags: ["hover", "classmethod", "staticmethod", "decorator"]

  - id: "py_hover_generic_type_hints"
    name: "Hover - Generic Type Hints Information"
    description: "Get hover info for generic type hints (List[T], Dict[K,V], etc.)"
    method: "textDocument/hover"
    repository: "django"
    file: "django/utils/datastructures.py"
    position:
      line: 85  # Generic type usage
      character: 20
    expected:
      success: true
      hover:
        has_content: true
        contains: ["List", "typing", "generic", "type"]
        format: "markdown"
    tags: ["hover", "typing", "generic", "hints"]

  # =============================================
  # DOCUMENT SYMBOLS - COMPREHENSIVE COVERAGE
  # =============================================
  
  - id: "py_docsym_django_model_comprehensive"
    name: "Document Symbols - Django Model Complete Structure"
    description: "Get all symbols from comprehensive Django model file"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 40  # Models, managers, methods, fields, signals
        types: ["class", "function", "variable", "property"]
        hierarchical: true
    tags: ["symbols", "document", "django", "model", "comprehensive"]

  - id: "py_docsym_django_views_generic"
    name: "Document Symbols - Django Generic Views Structure"
    description: "Get symbols from Django generic views with inheritance"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/views/generic/base.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 25  # Classes, methods, properties
        types: ["class", "function", "variable", "property"]
        inheritance_info: true
    tags: ["symbols", "document", "django", "views", "generic"]

  - id: "py_docsym_django_admin_complex"
    name: "Document Symbols - Django Admin Complex Structure"
    description: "Get symbols from Django admin with metaclasses and dynamic features"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/contrib/admin/options.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 50  # Admin classes, methods, properties, inner classes
        types: ["class", "function", "variable", "property"]
        nested_symbols: true
    tags: ["symbols", "document", "django", "admin", "complex"]

  - id: "py_docsym_flask_app_core"
    name: "Document Symbols - Flask App Core Structure"
    description: "Get symbols from Flask core application class"
    method: "textDocument/documentSymbol"
    repository: "flask"
    file: "src/flask/app.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 80  # Flask class has many methods and properties
        types: ["class", "function", "variable", "property"]
        method_signatures: true
    tags: ["symbols", "document", "flask", "app", "core"]

  - id: "py_docsym_flask_blueprints_detailed"
    name: "Document Symbols - Flask Blueprints Detailed"
    description: "Get symbols from Flask blueprints with registration logic"
    method: "textDocument/documentSymbol"
    repository: "flask"
    file: "src/flask/blueprints.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 30
        types: ["class", "function", "variable", "property"]
        blueprint_structure: true
    tags: ["symbols", "document", "flask", "blueprints", "detailed"]

  - id: "py_docsym_utility_functions_module"
    name: "Document Symbols - Utility Functions Module"
    description: "Get symbols from utility module with various function types"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/utils/functional.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 20
        types: ["function", "class", "variable"]
        function_decorators: true
    tags: ["symbols", "document", "utility", "functions"]

  - id: "py_docsym_signals_module"
    name: "Document Symbols - Django Signals Module"
    description: "Get symbols from Django signals with signal definitions"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/db/models/signals.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 15
        types: ["variable", "class", "function"]
        signal_definitions: true
    tags: ["symbols", "document", "django", "signals"]

  # =============================================
  # WORKSPACE SYMBOLS - COMPREHENSIVE COVERAGE
  # =============================================
  
  - id: "py_worksym_django_model_search_detailed"
    name: "Workspace Symbol Search - Django Models Detailed"
    description: "Search for all Django model-related symbols with filtering"
    method: "workspace/symbol"
    repository: "django"
    query: "Model"
    expected:
      success: true
      symbols:
        min_count: 100  # Extensive model usage in Django
        types: ["class", "function", "variable"]
        contains_patterns: ["Model", "BaseModel", "AbstractModel"]
    tags: ["symbols", "workspace", "django", "model", "detailed"]

  - id: "py_worksym_django_field_types_search"
    name: "Workspace Symbol Search - Django Field Types"
    description: "Search for all Django field type definitions"
    method: "workspace/symbol"
    repository: "django"
    query: "Field"
    expected:
      success: true
      symbols:
        min_count: 80  # Many field types in Django
        types: ["class", "function", "variable"]
        field_types: true
    tags: ["symbols", "workspace", "django", "field", "types"]

  - id: "py_worksym_django_view_classes"
    name: "Workspace Symbol Search - Django View Classes"
    description: "Search for Django view classes and mixins"
    method: "workspace/symbol"
    repository: "django"
    query: "View"
    expected:
      success: true
      symbols:
        min_count: 40
        types: ["class", "function"]
        view_hierarchy: true
    tags: ["symbols", "workspace", "django", "view", "classes"]

  - id: "py_worksym_django_admin_symbols"
    name: "Workspace Symbol Search - Django Admin Symbols"
    description: "Search for Django admin-related symbols"
    method: "workspace/symbol"
    repository: "django"
    query: "Admin"
    expected:
      success: true
      symbols:
        min_count: 30
        types: ["class", "function", "variable"]
        admin_components: true
    tags: ["symbols", "workspace", "django", "admin"]

  - id: "py_worksym_flask_decorators_search"
    name: "Workspace Symbol Search - Flask Decorators"
    description: "Search for Flask decorator functions"
    method: "workspace/symbol"
    repository: "flask"
    query: "route"
    expected:
      success: true
      symbols:
        min_count: 15
        types: ["function", "variable"]
        decorator_patterns: true
    tags: ["symbols", "workspace", "flask", "decorators"]

  - id: "py_worksym_flask_context_symbols"
    name: "Workspace Symbol Search - Flask Context Symbols"
    description: "Search for Flask context-related symbols"
    method: "workspace/symbol"
    repository: "flask"
    query: "context"
    expected:
      success: true
      symbols:
        min_count: 20
        types: ["class", "function", "variable"]
        context_types: true
    tags: ["symbols", "workspace", "flask", "context"]

  - id: "py_worksym_signal_receivers_search"
    name: "Workspace Symbol Search - Signal Receivers"
    description: "Search for Django signal receiver functions"
    method: "workspace/symbol"
    repository: "django"
    query: "receiver"
    expected:
      success: true
      symbols:
        min_count: 25
        types: ["function", "variable"]
        signal_patterns: true
    tags: ["symbols", "workspace", "django", "signals", "receivers"]

  - id: "py_worksym_test_functions_search"
    name: "Workspace Symbol Search - Test Functions"
    description: "Search for test functions and test classes"
    method: "workspace/symbol"
    repository: "django"
    query: "test"
    expected:
      success: true
      symbols:
        min_count: 200  # Django has extensive tests
        types: ["function", "class"]
        test_patterns: true
    tags: ["symbols", "workspace", "test", "functions"]

  # ============================================
  # COMPLEX & ADVANCED SCENARIOS
  # ============================================
  
  - id: "py_complex_django_metaclass_navigation"
    name: "Complex - Django Metaclass Navigation Chain"
    description: "Navigate through Django's complex metaclass inheritance"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 78  # ModelBase metaclass __new__ method
      character: 15
    expected:
      success: true
      definition:
        has_location: true
        metaclass_chain: true
    tags: ["complex", "metaclass", "django", "inheritance"]

  - id: "py_complex_django_dynamic_attribute_access"
    name: "Complex - Django Dynamic Attribute Access"
    description: "Test LSP with Django's dynamic attribute system"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 610  # Dynamic attribute access in Model.__getattribute__
      character: 25
    expected:
      success: true
      hover:
        has_content: true
        dynamic_attributes: true
    tags: ["complex", "dynamic", "attributes", "django"]

  - id: "py_complex_decorator_factory_chain"
    name: "Complex - Decorator Factory Chain Navigation"
    description: "Navigate through complex decorator factory implementations"
    method: "textDocument/definition"
    repository: "django"
    file: "django/views/decorators/cache.py"
    position:
      line: 25  # Decorator factory with multiple parameters
      character: 12
    expected:
      success: true
      definition:
        has_location: true
        decorator_chain: true
    tags: ["complex", "decorator", "factory", "chain"]

  - id: "py_complex_flask_context_manager"
    name: "Complex - Flask Context Manager Implementation"
    description: "Navigate Flask's context manager implementation"
    method: "textDocument/definition"
    repository: "flask"
    file: "src/flask/ctx.py"
    position:
      line: 380  # Context manager __enter__ method
      character: 15
    expected:
      success: true
      definition:
        has_location: true
        context_manager: true
    tags: ["complex", "flask", "context", "manager"]

  - id: "py_complex_generic_class_inheritance"
    name: "Complex - Generic Class Inheritance with Type Vars"
    description: "Navigate generic class inheritance with TypeVar constraints"
    method: "textDocument/definition"
    repository: "django"
    file: "django/utils/datastructures.py"
    position:
      line: 45  # Generic class with TypeVar
      character: 20
    expected:
      success: true
      definition:
        has_location: true
        generic_types: true
    tags: ["complex", "generic", "inheritance", "typing"]

  - id: "py_complex_async_context_manager"
    name: "Complex - Async Context Manager Navigation"
    description: "Navigate async context manager implementations"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/transaction.py"
    position:
      line: 185  # Async context manager
      character: 18
    expected:
      success: true
      definition:
        has_location: true
        async_context: true
    tags: ["complex", "async", "context", "manager"]

  - id: "py_complex_descriptor_protocol"
    name: "Complex - Descriptor Protocol Implementation"
    description: "Navigate through Python descriptor protocol (__get__, __set__, __delete__)"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/fields/__init__.py"
    position:
      line: 420  # Field descriptor __get__ method
      character: 15
    expected:
      success: true
      definition:
        has_location: true
        descriptor_protocol: true
    tags: ["complex", "descriptor", "protocol", "advanced"]

  # ========================================
  # PERFORMANCE & STRESS TEST SCENARIOS
  # ========================================
  
  - id: "py_perf_large_django_model_file"
    name: "Performance - Large Django Model File Navigation"
    description: "Test performance on Django's largest model file"
    method: "textDocument/definition"
    repository: "django"
    file: "django/contrib/auth/models.py"  # Large complex model file
    position:
      line: 400
      character: 15
    timeout: "15s"
    expected:
      success: true
      performance_threshold: "5s"
    tags: ["performance", "large-file", "django", "model"]

  - id: "py_perf_workspace_symbols_stress"
    name: "Performance - Workspace Symbol Search Stress Test"
    description: "Stress test workspace symbol search with common terms"
    method: "workspace/symbol"
    repository: "django"
    query: "a"  # Single character to get maximum results
    timeout: "20s"
    expected:
      success: true
      symbols:
        min_count: 500
        max_response_time: "15s"
    tags: ["performance", "workspace", "stress", "large-result"]

  - id: "py_perf_complex_inheritance_chain"
    name: "Performance - Complex Inheritance Chain Resolution"
    description: "Test performance on deep inheritance chains"
    method: "textDocument/definition"
    repository: "django"
    file: "django/contrib/admin/options.py"
    position:
      line: 250  # Deep inheritance chain
      character: 20
    timeout: "10s"
    expected:
      success: true
      inheritance_depth: 5
      performance_threshold: "8s"
    tags: ["performance", "inheritance", "complex", "deep-chain"]

  - id: "py_perf_flask_blueprint_resolution"
    name: "Performance - Flask Blueprint Resolution Performance"
    description: "Test performance on Flask blueprint symbol resolution"
    method: "textDocument/references"
    repository: "flask"
    file: "src/flask/blueprints.py"
    position:
      line: 150
      character: 15
    timeout: "12s"
    expected:
      success: true
      references:
        min_count: 20
        max_response_time: "10s"
    tags: ["performance", "flask", "blueprint", "resolution"]

# Test repository configurations with enhanced setup
test_repositories:
  django:
    path: "./test-repositories/python/django"
    setup:
      commands:
        - "python -m venv venv"
        - "source venv/bin/activate"
        - "python -m pip install --upgrade pip setuptools wheel"
        - "python -m pip install -e ."
        - "python -m pip install -r tests/requirements/py3.txt"
        - "python -m pip install python-lsp-server[all]"
        - "python -m pip install pylsp-mypy flake8 black isort"
      timeout: "15m"
      env:
        DJANGO_SETTINGS_MODULE: "django.conf.global_settings"
        PYTHONPATH: "."
      validation:
        required_files: ["django/__init__.py", "setup.py"]
        required_dirs: ["django/db", "django/contrib"]
  
  flask:
    path: "./test-repositories/python/flask"
    setup:
      commands:
        - "python -m venv venv"
        - "source venv/bin/activate"
        - "python -m pip install --upgrade pip setuptools wheel"
        - "python -m pip install -e ."
        - "python -m pip install -r requirements/dev.txt"
        - "python -m pip install python-lsp-server[all]"
        - "python -m pip install pylsp-mypy flake8 black isort"
      timeout: "10m"
      env:
        FLASK_APP: "src/flask"
        PYTHONPATH: "src"
      validation:
        required_files: ["src/flask/__init__.py", "setup.py"]
        required_dirs: ["src/flask", "tests"]

# Advanced validation rules specific to Python scenarios
validation_rules:
  - rule: "django_model_validation"
    description: "Validate Django model-specific LSP responses"
    applicable_tags: ["django", "model"]
    enabled: true
    checks:
      - "definition_points_to_model_file"
      - "hover_contains_field_info"
      - "references_include_migrations"
    
  - rule: "flask_blueprint_validation"
    description: "Validate Flask blueprint-specific LSP responses"
    applicable_tags: ["flask", "blueprint"]
    enabled: true
    checks:
      - "definition_points_to_blueprint_registration"
      - "hover_contains_route_info"
      - "references_include_app_registration"
    
  - rule: "metaclass_navigation_validation"
    description: "Validate metaclass navigation accuracy"
    applicable_tags: ["metaclass"]
    enabled: true
    checks:
      - "definition_resolves_metaclass_hierarchy"
      - "hover_explains_metaclass_behavior"
    
  - rule: "descriptor_protocol_validation"
    description: "Validate Python descriptor protocol understanding"
    applicable_tags: ["descriptor"]
    enabled: true
    checks:
      - "definition_shows_descriptor_methods"
      - "hover_explains_descriptor_behavior"
    
  - rule: "performance_threshold_validation"
    description: "Validate performance scenarios meet timing requirements"
    applicable_tags: ["performance"]
    enabled: true
    thresholds:
      definition: "8s"
      references: "15s"
      hover: "5s"
      document_symbols: "10s"
      workspace_symbols: "20s"

# Test execution configuration for comprehensive scenarios
execution_config:
  parallel_execution: true
  max_concurrent_tests: 4
  test_isolation: true
  cleanup_between_tests: false
  preserve_server_state: true
  server_warmup_time: "10s"
  test_retry_count: 2
  test_retry_delay: "5s"

# Reporting configuration for detailed analysis
reporting_config:
  detailed_performance_metrics: true
  inheritance_chain_analysis: true
  symbol_resolution_paths: true
  error_categorization: true
  success_rate_by_complexity: true
  django_specific_metrics: true
  flask_specific_metrics: true