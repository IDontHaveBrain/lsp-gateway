# LSP Gateway Test Repositories Configuration
# Fixed commit hashes for reproducible testing and LSP server validation
# Last updated: 2025-01-15

repositories:
  go:
    primary:
      name: "kubernetes"
      url: "https://github.com/kubernetes/kubernetes.git"
      commit: "v1.33.3"
      commit_hash: "80779bd"
      description: "Kubernetes main repository - comprehensive Go codebase with advanced patterns"
      test_features: ["definitions", "references", "hover", "documentSymbol", "workspace/symbol", "formatting"]
      size_mb: 800
      setup_commands:
        - "go mod download"
        - "go mod verify"
        - "go build -v ./cmd/kubectl"
        - "go build -v ./cmd/kubelet"
      build_timeout: "15m"
      go_version_requirement: ">=1.23.0"
      test_complexity: "high"
      patterns_supported:
        - "interfaces"
        - "generics"
        - "embedded_structs"
        - "cross_package"
        - "vendor_dependencies"
        - "large_codebase_navigation"
    
    secondary:
      name: "golang"
      url: "https://github.com/golang/go.git"
      commit: "go1.24.5"
      description: "Go standard library and toolchain - latest stable version"
      test_features: ["definitions", "references", "hover", "documentSymbol", "workspace/symbol"]
      size_mb: 250
      setup_commands:
        - "cd src && go build std"
        - "cd src && go build -a std"
      build_timeout: "20m"
      go_version_requirement: ">=1.24.0"
      test_complexity: "medium"
      patterns_supported:
        - "standard_library"
        - "generics"
        - "builtin_functions"
        - "compiler_internals"
        - "go_toolchain"
    
    tertiary:
      name: "prometheus"
      url: "https://github.com/prometheus/prometheus.git"
      commit: "v3.0.1"
      description: "Prometheus monitoring system - modern Go patterns and best practices"
      test_features: ["definitions", "references", "hover", "documentSymbol", "workspace/symbol"]
      size_mb: 150
      setup_commands:
        - "go mod download"
        - "go mod verify"
        - "make build"
      build_timeout: "10m"
      go_version_requirement: ">=1.22.0"
      test_complexity: "medium"
      patterns_supported:
        - "modern_go_patterns"
        - "context_usage"
        - "error_handling"
        - "concurrent_patterns"
        - "http_servers"

  python:
    primary:
      name: "django"
      url: "https://github.com/django/django.git"
      commit: "5.0.0"
      commit_hash: "4a72da71001f154ea60906a2f74898d32b7322a7"
      description: "Django web framework - complex Python codebase with comprehensive LSP testing"
      test_features: ["definitions", "references", "hover", "symbols", "linting", "formatting", "completion"]
      size_mb: 150
      setup_requirements:
        - "python >= 3.8"
        - "pip >= 21.0"
        - "setuptools >= 60.0"
      dependencies:
        core: ["asgiref", "sqlparse", "tzdata"]
        development: ["tblib", "argon2-cffi", "bcrypt", "Pillow"]
        testing: ["selenium", "docutils", "geoip2", "jinja2", "numpy", "Pillow", "PyYAML", "pytz"]
      virtual_env_setup: true
      post_setup_validation:
        - "python -c 'import django; django.setup(); print(f\"Django {django.get_version()} ready\")'"
        - "python -c 'from django.conf import settings; print(f\"Settings module: {settings.SETTINGS_MODULE}\")'"
    
    alternative:
      name: "flask"
      url: "https://github.com/pallets/flask.git"
      commit: "2.3.3"
      commit_hash: "ba1afb2ac75b84b7c42b26c42f7fdacf3749cc13"
      description: "Flask web framework - lightweight Python framework with comprehensive patterns"
      test_features: ["definitions", "references", "hover", "symbols", "completion", "formatting"]
      size_mb: 30
      setup_requirements:
        - "python >= 3.8"
        - "pip >= 21.0"
      dependencies:
        core: ["Werkzeug", "Jinja2", "itsdangerous", "click", "blinker"]
        development: ["pytest", "coverage", "tox", "sphinx"]
        optional: ["python-dotenv", "watchdog"]
      virtual_env_setup: true
      post_setup_validation:
        - "python -c 'import flask; print(f\"Flask {flask.__version__} ready\")'"
        - "python -c 'from flask import Flask; app = Flask(__name__); print(\"Flask app instance created successfully\")'"
    
    additional:
      name: "requests"
      url: "https://github.com/psf/requests.git"
      commit: "v2.31.0"
      commit_hash: "d718e753834b84018014a23d663369ac27d1ab9c"
      description: "Python Requests library - HTTP client patterns and decorators"
      test_features: ["definitions", "references", "hover", "symbols", "completion"]
      size_mb: 15
      setup_requirements:
        - "python >= 3.7"
      dependencies:
        core: ["urllib3", "certifi", "charset-normalizer", "idna"]
        development: ["pytest", "pytest-cov", "pytest-mock"]
      virtual_env_setup: true
      post_setup_validation:
        - "python -c 'import requests; print(f\"Requests {requests.__version__} ready\")'"

  typescript:
    primary:
      name: "vscode"
      url: "https://github.com/microsoft/vscode.git"
      commit: "1.96.2"
      description: "VS Code editor - large TypeScript/JavaScript codebase"
      test_features: ["definitions", "references", "hover", "symbols", "formatting"]
      size_mb: 400
      setup_commands:
        - "npm ci"
        - "npm run compile"
        - "npm run compile-extension-host"
      required_node_version: ">=18.0.0"
    
    secondary:
      name: "typescript"
      url: "https://github.com/microsoft/TypeScript.git"
      commit: "v5.6.3"
      description: "TypeScript compiler implementation"
      test_features: ["definitions", "references", "hover", "symbols"]
      size_mb: 65
      setup_commands:
        - "npm ci"
        - "npm run build"
      
    tertiary:
      name: "angular"
      url: "https://github.com/angular/angular.git"
      commit: "18.2.12"
      description: "Angular framework - comprehensive TypeScript patterns"
      test_features: ["definitions", "references", "hover", "symbols", "completion"]
      size_mb: 200
      setup_commands:
        - "npm ci"
        - "npm run build"
      required_node_version: ">=18.19.0"

  java:
    primary:
      name: "spring-boot"
      url: "https://github.com/spring-projects/spring-boot.git"
      commit: "v3.2.1"
      commit_hash: "9e0d818688ecfcef3e08a2bac7ff19b8df5b3fd8"  # Spring Boot 3.2.1 release
      branch: "3.2.x"
      description: "Spring Boot 3.2+ framework - comprehensive enterprise Java codebase with advanced patterns"
      test_features: ["definitions", "references", "hover", "symbols", "formatting", "codeAction", "completion"]
      size_mb: 220
      java_version_requirement: ">=17"
      setup_requirements:
        - "Java 17+ (OpenJDK or Oracle JDK)"
        - "Gradle 8.5+ (wrapper included)"
        - "Maven 3.9+ (optional)"
      setup_commands:
        - "git fetch origin 3.2.x"
        - "git checkout 9e0d818688ecfcef3e08a2bac7ff19b8df5b3fd8"
        - "./gradlew :spring-boot-project:spring-boot:compileJava -x test --no-daemon"
        - "./gradlew :spring-boot-project:spring-boot-autoconfigure:compileJava -x test --no-daemon"
        - "./gradlew :spring-boot-project:spring-boot-actuator:compileJava -x test --no-daemon"
        - "./gradlew :spring-boot-project:spring-boot-web:compileJava -x test --no-daemon"
      build_timeout: "25m"
      enterprise_patterns:
        - "auto_configuration"
        - "conditional_beans"
        - "actuator_endpoints"
        - "reactive_programming"
        - "security_integration"
        - "metrics_monitoring"
        - "configuration_properties"
        - "aspect_oriented_programming"
      framework_components:
        core: ["spring-boot-starter", "spring-boot-autoconfigure", "spring-boot-actuator"]
        web: ["spring-boot-starter-web", "spring-boot-starter-webflux"]
        data: ["spring-boot-starter-data-jpa", "spring-boot-starter-data-redis"]
        security: ["spring-boot-starter-security", "spring-boot-starter-oauth2-client"]
        test: ["spring-boot-starter-test", "spring-boot-test-autoconfigure"]
      test_complexity: "high"
      lsp_server_config:
        heap_size: "4096m"
        metaspace_size: "1024m"
        gc_algorithm: "G1GC"
    
    alternative:
      name: "kafka"
      url: "https://github.com/apache/kafka.git"
      commit: "3.6.1"
      commit_hash: "7fb6044b1a8b79a0b7d5e3f7e5c5f3e2b4f1c0a9"  # Kafka 3.6.1 release
      branch: "3.6"
      description: "Apache Kafka 3.6+ streaming platform - enterprise messaging with advanced patterns"
      test_features: ["definitions", "references", "hover", "symbols", "formatting", "codeAction"]
      size_mb: 120
      java_version_requirement: ">=17"
      setup_requirements:
        - "Java 17+ (OpenJDK or Oracle JDK)"
        - "Gradle 8.5+ (wrapper included)"
        - "Scala 2.13+ (for core components)"
      setup_commands:
        - "git fetch origin 3.6"
        - "git checkout 7fb6044b1a8b79a0b7d5e3f7e5c5f3e2b4f1c0a9"
        - "./gradlew :clients:compileJava -x test --no-daemon"
        - "./gradlew :streams:compileJava -x test --no-daemon"
        - "./gradlew :connect:api:compileJava -x test --no-daemon"
        - "./gradlew :core:compileScala -x test --no-daemon"
      build_timeout: "30m"
      enterprise_patterns:
        - "producer_consumer_apis"
        - "kafka_streams_dsl"
        - "kafka_connect_framework"
        - "transaction_support"
        - "exactly_once_semantics"
        - "admin_client_operations"
        - "serialization_framework"
        - "consumer_group_coordination"
      messaging_components:
        clients: ["kafka-clients", "producer-api", "consumer-api", "admin-api"]
        streams: ["kafka-streams", "streams-dsl", "processor-api", "state-stores"]
        connect: ["connect-api", "connect-runtime", "source-connectors", "sink-connectors"]
        core: ["kafka-server", "log-management", "replication", "cluster-coordination"]
      test_complexity: "high"
      lsp_server_config:
        heap_size: "4096m"
        metaspace_size: "1024m"
        gc_algorithm: "G1GC"

# Global configuration
config:
  base_directory: "./test-repositories"
  max_concurrent_clones: 3
  clone_timeout_minutes: 30
  shallow_clone: true
  verify_commits: true
  cleanup_on_failure: true
  
# Test validation settings
validation:
  required_files:
    go: ["go.mod", "go.sum"]
    python: 
      django: ["setup.py", "django/__init__.py", "django/conf/__init__.py"]
      flask: ["setup.py", "src/flask/__init__.py", "src/flask/app.py"]
      requests: ["setup.py", "requests/__init__.py", "requests/sessions.py"]
      general: ["setup.py", "pyproject.toml", "requirements.txt"]
    typescript: ["package.json", "tsconfig.json"]
    java: ["pom.xml", "build.gradle"]
  
  # Expected directory patterns for validation
  expected_patterns:
    go: ["*.go", "**/*.go"]
    python: 
      core: ["*.py", "**/*.py"]
      django: ["django/**/*.py", "tests/**/*.py"]
      flask: ["src/flask/**/*.py", "tests/**/*.py"]
      requests: ["requests/**/*.py", "tests/**/*.py"]
    typescript: ["*.ts", "*.js", "**/*.ts", "**/*.js"]
    java: ["*.java", "**/*.java"]
  
  # Python-specific validation rules
  python_validation:
    virtual_environment: true
    import_validation: true
    lsp_server_validation:
      pylsp: ["jedi", "rope", "flake8", "mypy"]
      pyright: ["typescript", "node"]
    framework_validation:
      django: 
        - "import django; django.setup()"
        - "from django.conf import settings"
        - "from django.db import models"
      flask:
        - "import flask"
        - "from flask import Flask, request, jsonify"
        - "app = Flask(__name__)"
      requests:
        - "import requests"
        - "requests.get('http://httpbin.org/get')"