
// Code generated by 'go test'. DO NOT EDIT.

package main

import (
	"os"

	"testing"
	"testing/internal/testdeps"



	_test "lsp-gateway/src/server/aggregators/base"


)

var tests = []testing.InternalTest{

	{"TestNewErrorCollector", _test.TestNewErrorCollector},

	{"TestErrorCollector_BasicOperations", _test.TestErrorCollector_BasicOperations},

	{"TestErrorCollector_NilErrorHandling", _test.TestErrorCollector_NilErrorHandling},

	{"TestErrorCollector_AutomaticTypeDetection", _test.TestErrorCollector_AutomaticTypeDetection},

	{"TestErrorCollector_AddTyped", _test.TestErrorCollector_AddTyped},

	{"TestErrorCollector_ThreadSafety", _test.TestErrorCollector_ThreadSafety},

	{"TestErrorCollector_ErrorRetrieval", _test.TestErrorCollector_ErrorRetrieval},

	{"TestErrorCollector_ErrorSummary", _test.TestErrorCollector_ErrorSummary},

	{"TestErrorCollector_LanguageContext", _test.TestErrorCollector_LanguageContext},

	{"TestErrorCollector_TimestampHandling", _test.TestErrorCollector_TimestampHandling},

	{"TestErrorCollector_ClearOperations", _test.TestErrorCollector_ClearOperations},

	{"TestErrorCollector_EdgeCases", _test.TestErrorCollector_EdgeCases},

	{"TestErrorCollector_LargeVolume", _test.TestErrorCollector_LargeVolume},

	{"TestNewParallelAggregator", _test.TestNewParallelAggregator},

	{"TestParallelAggregator_Execute_AllClientsSucceed", _test.TestParallelAggregator_Execute_AllClientsSucceed},

	{"TestParallelAggregator_Execute_SomeClientsFail", _test.TestParallelAggregator_Execute_SomeClientsFail},

	{"TestParallelAggregator_Execute_AllClientsFail", _test.TestParallelAggregator_Execute_AllClientsFail},

	{"TestParallelAggregator_Execute_IndividualTimeout", _test.TestParallelAggregator_Execute_IndividualTimeout},

	{"TestParallelAggregator_Execute_OverallTimeout", _test.TestParallelAggregator_Execute_OverallTimeout},

	{"TestParallelAggregator_Execute_ContextCancellation", _test.TestParallelAggregator_Execute_ContextCancellation},

	{"TestParallelAggregator_Execute_EmptyClients", _test.TestParallelAggregator_Execute_EmptyClients},

	{"TestParallelAggregator_ExecuteAll_AllSucceed", _test.TestParallelAggregator_ExecuteAll_AllSucceed},

	{"TestParallelAggregator_ExecuteAll_OneClientFails", _test.TestParallelAggregator_ExecuteAll_OneClientFails},

	{"TestParallelAggregator_ExecuteAtLeastOne_AllSucceed", _test.TestParallelAggregator_ExecuteAtLeastOne_AllSucceed},

	{"TestParallelAggregator_ExecuteAtLeastOne_OneSucceeds", _test.TestParallelAggregator_ExecuteAtLeastOne_OneSucceeds},

	{"TestParallelAggregator_ExecuteAtLeastOne_AllFail", _test.TestParallelAggregator_ExecuteAtLeastOne_AllFail},

	{"TestParallelAggregator_ExecuteWithLanguageTimeouts_Success", _test.TestParallelAggregator_ExecuteWithLanguageTimeouts_Success},

	{"TestParallelAggregator_ExecuteWithLanguageTimeouts_LanguageSpecificTimeout", _test.TestParallelAggregator_ExecuteWithLanguageTimeouts_LanguageSpecificTimeout},

	{"TestParallelAggregator_Execute_ConcurrentExecution", _test.TestParallelAggregator_Execute_ConcurrentExecution},

	{"TestParallelAggregator_Execute_ThreadSafety", _test.TestParallelAggregator_Execute_ThreadSafety},

	{"TestParallelAggregator_Execute_LargeResponsePayload", _test.TestParallelAggregator_Execute_LargeResponsePayload},

	{"TestParallelAggregator_Execute_EmptyResponse", _test.TestParallelAggregator_Execute_EmptyResponse},

	{"TestParallelAggregator_Execute_EdgeCases", _test.TestParallelAggregator_Execute_EdgeCases},

	{"TestSliceMerger_BasicMerge", _test.TestSliceMerger_BasicMerge},

	{"TestSliceMerger_WithDeduplication", _test.TestSliceMerger_WithDeduplication},

	{"TestSliceMerger_SizeLimit", _test.TestSliceMerger_SizeLimit},

	{"TestSliceMerger_EmptyResults", _test.TestSliceMerger_EmptyResults},

	{"TestSliceMerger_Metadata", _test.TestSliceMerger_Metadata},

	{"TestSliceMerger_LargeDatasets", _test.TestSliceMerger_LargeDatasets},

	{"TestMapMerger_BasicMerge", _test.TestMapMerger_BasicMerge},

	{"TestMapMerger_ConflictResolution", _test.TestMapMerger_ConflictResolution},

	{"TestMapMerger_LanguagePriority", _test.TestMapMerger_LanguagePriority},

	{"TestMapMerger_EmptyMaps", _test.TestMapMerger_EmptyMaps},

	{"TestMapMerger_OverlappingKeys", _test.TestMapMerger_OverlappingKeys},

	{"TestCountMerger_BasicSum", _test.TestCountMerger_BasicSum},

	{"TestCountMerger_ZeroValues", _test.TestCountMerger_ZeroValues},

	{"TestCountMerger_NegativeValues", _test.TestCountMerger_NegativeValues},

	{"TestCountMerger_LargeNumbers", _test.TestCountMerger_LargeNumbers},

	{"TestCountMerger_EmptyResults", _test.TestCountMerger_EmptyResults},

	{"TestFirstSuccessMerger_ReturnsFirstSuccess", _test.TestFirstSuccessMerger_ReturnsFirstSuccess},

	{"TestFirstSuccessMerger_AllErrors", _test.TestFirstSuccessMerger_AllErrors},

	{"TestFirstSuccessMerger_EmptyResults", _test.TestFirstSuccessMerger_EmptyResults},

	{"TestFirstSuccessMerger_PriorityOrder", _test.TestFirstSuccessMerger_PriorityOrder},

	{"TestFirstSuccessMerger_ZeroValueDetection", _test.TestFirstSuccessMerger_ZeroValueDetection},

	{"TestAllOrNothingMerger_AllSuccess", _test.TestAllOrNothingMerger_AllSuccess},

	{"TestAllOrNothingMerger_OneFailure", _test.TestAllOrNothingMerger_OneFailure},

	{"TestAllOrNothingMerger_EmptyResults", _test.TestAllOrNothingMerger_EmptyResults},

	{"TestAllOrNothingMerger_WithSizeLimit", _test.TestAllOrNothingMerger_WithSizeLimit},

	{"TestMergeConfig_CustomSettings", _test.TestMergeConfig_CustomSettings},

	{"TestMergeConfig_FailureThreshold", _test.TestMergeConfig_FailureThreshold},

	{"TestResultMerger_NilHandling", _test.TestResultMerger_NilHandling},

	{"TestDefaultMergeConfig", _test.TestDefaultMergeConfig},

	{"TestLanguagePriorityOrdering", _test.TestLanguagePriorityOrdering},

	{"TestDeduplication", _test.TestDeduplication},

	{"TestNewTimeoutManager", _test.TestNewTimeoutManager},

	{"TestTimeoutManager_BuilderPattern", _test.TestTimeoutManager_BuilderPattern},

	{"TestTimeoutManager_ForOperation", _test.TestTimeoutManager_ForOperation},

	{"TestTimeoutManager_WithCustomTimeout", _test.TestTimeoutManager_WithCustomTimeout},

	{"TestTimeoutManager_WithGlobalMultiplier", _test.TestTimeoutManager_WithGlobalMultiplier},

	{"TestTimeoutManager_GetTimeout_SupportedLanguages", _test.TestTimeoutManager_GetTimeout_SupportedLanguages},

	{"TestTimeoutManager_GetTimeout_OperationTypes", _test.TestTimeoutManager_GetTimeout_OperationTypes},

	{"TestTimeoutManager_GetTimeout_UnknownOperation", _test.TestTimeoutManager_GetTimeout_UnknownOperation},

	{"TestTimeoutManager_GetTimeout_UnknownLanguage", _test.TestTimeoutManager_GetTimeout_UnknownLanguage},

	{"TestTimeoutManager_GetTimeout_CustomTimeouts", _test.TestTimeoutManager_GetTimeout_CustomTimeouts},

	{"TestTimeoutManager_GetTimeout_GlobalMultiplier", _test.TestTimeoutManager_GetTimeout_GlobalMultiplier},

	{"TestTimeoutManager_GetTimeout_CustomTimeoutWithMultiplier", _test.TestTimeoutManager_GetTimeout_CustomTimeoutWithMultiplier},

	{"TestTimeoutManager_GetTimeout_ZeroMultiplier", _test.TestTimeoutManager_GetTimeout_ZeroMultiplier},

	{"TestTimeoutManager_CreateContext", _test.TestTimeoutManager_CreateContext},

	{"TestTimeoutManager_CreateContext_NilParent", _test.TestTimeoutManager_CreateContext_NilParent},

	{"TestTimeoutManager_GetOverallTimeout", _test.TestTimeoutManager_GetOverallTimeout},

	{"TestTimeoutManager_GetOverallTimeout_EmptyLanguages", _test.TestTimeoutManager_GetOverallTimeout_EmptyLanguages},

	{"TestTimeoutManager_GetOverallTimeout_UnknownLanguages", _test.TestTimeoutManager_GetOverallTimeout_UnknownLanguages},

	{"TestTimeoutManager_GetOverallTimeout_WithMultiplier", _test.TestTimeoutManager_GetOverallTimeout_WithMultiplier},

	{"TestTimeoutManager_CreateOverallContext", _test.TestTimeoutManager_CreateOverallContext},

	{"TestTimeoutManager_LogTimeoutInfo", _test.TestTimeoutManager_LogTimeoutInfo},

	{"TestTimeoutManager_GetSupportedLanguages", _test.TestTimeoutManager_GetSupportedLanguages},

	{"TestTimeoutManager_EdgeCases", _test.TestTimeoutManager_EdgeCases},

	{"TestTimeoutManager_OperationConstants", _test.TestTimeoutManager_OperationConstants},

	{"TestTimeoutManager_IntegrationWithConstants", _test.TestTimeoutManager_IntegrationWithConstants},

	{"TestTimeoutManager_ConcurrentAccess", _test.TestTimeoutManager_ConcurrentAccess},

	{"TestTimeoutManager_ContextCancellation", _test.TestTimeoutManager_ContextCancellation},

	{"TestTimeoutManager_ChainedOperations", _test.TestTimeoutManager_ChainedOperations},

	{"TestGetTimeout_RegularCI", _test.TestGetTimeout_RegularCI},

	{"TestGetTimeout_WindowsCI", _test.TestGetTimeout_WindowsCI},

	{"TestGetTimeout_NonWindowsCI_RegularCI", _test.TestGetTimeout_NonWindowsCI_RegularCI},

	{"TestGetTimeout_NoCIEnvironmentExplicit", _test.TestGetTimeout_NoCIEnvironmentExplicit},

	{"TestGetTimeout_CICombinedWithGlobalMultiplier", _test.TestGetTimeout_CICombinedWithGlobalMultiplier},

	{"TestGetTimeout_CustomTimeout_NotAffectedByCI", _test.TestGetTimeout_CustomTimeout_NotAffectedByCI},

	{"TestGetOverallTimeout_WithCI", _test.TestGetOverallTimeout_WithCI},

	{"TestGetOverallTimeout_WindowsCI", _test.TestGetOverallTimeout_WindowsCI},

	{"TestCreateContext_WithCI", _test.TestCreateContext_WithCI},

	{"TestCI_EnvironmentDetection_EdgeCases", _test.TestCI_EnvironmentDetection_EdgeCases},

}

var benchmarks = []testing.InternalBenchmark{

	{"BenchmarkErrorCollector_Add", _test.BenchmarkErrorCollector_Add},

	{"BenchmarkErrorCollector_ConcurrentAdd", _test.BenchmarkErrorCollector_ConcurrentAdd},

	{"BenchmarkErrorCollector_GetErrors", _test.BenchmarkErrorCollector_GetErrors},

	{"BenchmarkParallelAggregator_Execute_FewClients", _test.BenchmarkParallelAggregator_Execute_FewClients},

	{"BenchmarkParallelAggregator_Execute_ManyClients", _test.BenchmarkParallelAggregator_Execute_ManyClients},

	{"BenchmarkParallelAggregator_ExecuteAll", _test.BenchmarkParallelAggregator_ExecuteAll},

	{"BenchmarkSliceMerger_SmallDatasets", _test.BenchmarkSliceMerger_SmallDatasets},

	{"BenchmarkSliceMerger_LargeDatasets", _test.BenchmarkSliceMerger_LargeDatasets},

	{"BenchmarkSliceMerger_WithDeduplication", _test.BenchmarkSliceMerger_WithDeduplication},

	{"BenchmarkMapMerger_ConflictResolution", _test.BenchmarkMapMerger_ConflictResolution},

	{"BenchmarkCountMerger", _test.BenchmarkCountMerger},

	{"BenchmarkFirstSuccessMerger", _test.BenchmarkFirstSuccessMerger},

	{"BenchmarkAllOrNothingMerger", _test.BenchmarkAllOrNothingMerger},

	{"BenchmarkGetTimeout_NoCI", _test.BenchmarkGetTimeout_NoCI},

	{"BenchmarkGetTimeout_WithCI", _test.BenchmarkGetTimeout_WithCI},

}

var fuzzTargets = []testing.InternalFuzzTarget{

}

var examples = []testing.InternalExample{

}

func init() {

	testdeps.ImportPath = "lsp-gateway/src/server/aggregators/base"
}

func main() {
	m := testing.MainStart(testdeps.TestDeps{}, tests, benchmarks, fuzzTargets, examples)

	os.Exit(m.Run())

}

