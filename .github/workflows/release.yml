name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        default: false
        type: boolean

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION="${{ github.ref_name }}"
          IS_PRERELEASE="false"
          # Check if this is a pre-release version
          if [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+-(alpha|beta|rc) ]]; then
            IS_PRERELEASE="true"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        
        echo "Release version: $VERSION"
        echo "Is prerelease: $IS_PRERELEASE"

    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Install test dependencies
      run: |
        go install golang.org/x/tools/gopls@latest
        npm install -g typescript-language-server typescript
        pip install pyright

    - name: Run comprehensive tests
      run: ./scripts/run-comprehensive-tests.sh

    - name: Check coverage threshold
      run: make coverage-threshold

  build:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [validate, test]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
          - goos: darwin
            goarch: amd64
            runner: macos-13
          - goos: darwin
            goarch: arm64
            runner: macos-latest
          - goos: windows
            goarch: amd64
            runner: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: Install build dependencies (Linux)
      if: matrix.goos == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y bc

    - name: Install build dependencies (macOS)
      if: matrix.goos == 'darwin'
      run: |
        brew install bc

    - name: Build optimized binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        COMMIT_HASH=$(git rev-parse --short HEAD)
        
        EXECUTABLE_SUFFIX=""
        if [ "${{ matrix.goos }}" = "windows" ]; then
          EXECUTABLE_SUFFIX=".exe"
        fi
        
        OUTPUT_NAME="lsp-gateway-${VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}${EXECUTABLE_SUFFIX}"
        
        mkdir -p dist
        
        go build \
          -trimpath \
          -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME} -X main.commitHash=${COMMIT_HASH}" \
          -o "dist/${OUTPUT_NAME}" \
          ./cmd/lsp-gateway

    - name: Generate checksums
      run: |
        cd dist
        if [ "${{ matrix.goos }}" = "windows" ]; then
          certutil -hashfile lsp-gateway-${{ needs.validate.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.exe SHA256 > lsp-gateway-${{ needs.validate.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.exe.sha256
        else
          sha256sum lsp-gateway-${{ needs.validate.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }} > lsp-gateway-${{ needs.validate.outputs.version }}-${{ matrix.goos }}-${{ matrix.goarch }}.sha256
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lsp-gateway-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 7

  package:
    name: Create Release Packages
    runs-on: ubuntu-latest
    needs: [validate, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.24

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/
        pattern: lsp-gateway-*
        merge-multiple: true

    - name: Install packaging dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bc zip

    - name: Create release packages
      env:
        PACKAGE_VERSION: ${{ needs.validate.outputs.version }}
        SKIP_BUILD: "true"
      run: |
        mkdir -p dist
        ./scripts/package.sh --skip-build --package-format both

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: lsp-gateway-packages
        path: dist/packages/
        retention-days: 30

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [validate, test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          lsp-gateway
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'push' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.validate.outputs.version }}
          BUILD_TIME=${{ github.event.head_commit.timestamp }}
          COMMIT_HASH=${{ github.sha }}

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: lsp-gateway-packages
        path: packages/

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        path: binaries/
        pattern: lsp-gateway-*
        merge-multiple: true

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${{ needs.validate.outputs.version }}
        
        cat > release_notes.md << EOF
        # LSP Gateway $VERSION
        
        ## What's New
        
        This release includes improvements to the LSP Gateway functionality and performance optimizations.
        
        ## Installation
        
        ### Quick Install (Linux/macOS)
        
        \`\`\`bash
        curl -fsSL https://github.com/${{ github.repository }}/releases/download/$VERSION/install.sh | bash
        \`\`\`
        
        ### Manual Installation
        
        1. Download the appropriate binary for your platform from the release assets
        2. Extract the package: \`tar -xzf lsp-gateway-$VERSION-linux-amd64.tar.gz\`
        3. Run the installer: \`./install.sh\`
        
        ### Available Platforms
        
        - **Linux (AMD64)**: \`lsp-gateway-$VERSION-linux-amd64.tar.gz\`
        - **Linux (ARM64)**: \`lsp-gateway-$VERSION-linux-arm64.tar.gz\`
        - **macOS (AMD64)**: \`lsp-gateway-$VERSION-darwin-amd64.tar.gz\`
        - **macOS (ARM64)**: \`lsp-gateway-$VERSION-darwin-arm64.tar.gz\`
        - **Windows (AMD64)**: \`lsp-gateway-$VERSION-windows-amd64.zip\`
        
        ## Docker
        
        \`\`\`bash
        docker run --rm -p 8080:8080 ghcr.io/${{ github.repository }}:$VERSION
        \`\`\`
        
        ## Verification
        
        Each binary includes a SHA256 checksum file for verification:
        
        \`\`\`bash
        sha256sum -c lsp-gateway-$VERSION-linux-amd64.sha256
        \`\`\`
        
        ## Full Changelog
        
        See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
        EOF

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate.outputs.version }}
        name: LSP Gateway ${{ needs.validate.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate.outputs.is_prerelease }}
        files: |
          packages/*.tar.gz
          packages/*.zip
          packages/manifest.json
          binaries/*.sha256
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create release summary
      run: |
        echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Prerelease: ${{ needs.validate.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- Packages created: $(ls packages/ | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- Docker images: Available on Docker Hub and GHCR" >> $GITHUB_STEP_SUMMARY
        echo "- Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate, release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Notify via webhook
      if: secrets.RELEASE_WEBHOOK_URL
      run: |
        curl -X POST "${{ secrets.RELEASE_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "version": "${{ needs.validate.outputs.version }}",
            "repository": "${{ github.repository }}",
            "release_url": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.version }}",
            "prerelease": ${{ needs.validate.outputs.is_prerelease }}
          }'