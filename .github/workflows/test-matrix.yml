name: Test Matrix

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION_MATRIX: '["1.20.x", "1.21.x", "1.22.x", "1.23.x", "1.24.x"]'
  PLATFORMS_MATRIX: '["ubuntu-latest", "macos-latest", "windows-latest"]'

jobs:
  # Pre-flight checks
  pre-flight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      go-versions: ${{ env.GO_VERSION_MATRIX }}
      platforms: ${{ env.PLATFORMS_MATRIX }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Go module validation
        run: |
          go mod verify
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Static analysis
        run: |
          go vet ./...
          
  # Code quality and security checks
  quality-checks:
    name: Quality & Security
    runs-on: ubuntu-latest
    needs: pre-flight
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install quality tools
        run: |
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          go install golang.org/x/tools/cmd/deadcode@latest

      - name: Format check
        run: |
          gofmt -d . | tee /tmp/gofmt.out
          test ! -s /tmp/gofmt.out

      - name: Lint
        run: make lint

      - name: Security scan
        run: make security

      - name: Dead code analysis
        run: make check-deadcode

  # Unit tests matrix
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.platform }}
    needs: pre-flight
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.pre-flight.outputs.platforms) }}
        go-version: ${{ fromJson(needs.pre-flight.outputs.go-versions) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic -short ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests,${{ matrix.platform }},go${{ matrix.go-version }}
          name: unit-${{ matrix.platform }}-go${{ matrix.go-version }}

      - name: Archive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.platform }}-go${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html
          retention-days: 7

  # Integration tests matrix
  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.platform }}
    needs: [pre-flight, quality-checks]
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.pre-flight.outputs.platforms) }}
        go-version: ['1.24.x'] # Use latest Go version for integration tests
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}

      - name: Setup Node.js (for LSP servers)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Python (for LSP servers)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Java (for LSP servers)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install LSP servers
        run: |
          # Go LSP server
          go install golang.org/x/tools/gopls@latest
          
          # Python LSP server
          pip install python-lsp-server[all]
          
          # TypeScript LSP server
          npm install -g typescript-language-server typescript
          
          # Java LSP server (download if needed)
          mkdir -p ~/.local/share/eclipse.jdt.ls/plugins
          
      - name: Build binary
        run: make local

      - name: Setup test environment
        run: |
          mkdir -p test-workspace
          # Create test projects for different languages
          echo 'package main; import "fmt"; func main() { fmt.Println("Hello") }' > test-workspace/main.go
          echo 'print("Hello Python")' > test-workspace/main.py
          echo 'console.log("Hello TypeScript");' > test-workspace/main.ts

      - name: Run integration tests
        run: |
          export PATH=$PWD/bin:$PATH
          make test-lsp-validation
        timeout-minutes: 15

      - name: Run JDTLS integration tests
        if: matrix.platform == 'ubuntu-latest'
        run: make test-jdtls-integration
        timeout-minutes: 20

      - name: Archive integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results-${{ matrix.platform }}
          path: |
            test-workspace/
            bin/
          retention-days: 3

  # Performance baseline tests
  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.24.x-${{ hashFiles('**/go.sum') }}

      - name: Setup LSP servers
        run: |
          go install golang.org/x/tools/gopls@latest
          pip install python-lsp-server[all]
          npm install -g typescript-language-server typescript

      - name: Build binary
        run: make local

      - name: Run performance tests
        run: |
          export PATH=$PWD/bin:$PATH
          go test -v -bench=. -benchmem -timeout=30m ./tests/performance/...
          
      - name: Store performance baseline
        run: |
          mkdir -p performance-results
          go test -bench=. -benchmem -timeout=30m ./tests/performance/... > performance-results/baseline-${{ github.sha }}.txt

      - name: Upload performance baseline
        uses: actions/upload-artifact@v4
        with:
          name: performance-baseline-${{ github.sha }}
          path: performance-results/
          retention-days: 30

  # Cross-platform build verification
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: pre-flight
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-1.24.x-${{ hashFiles('**/go.sum') }}

      - name: Build all platforms
        run: make build

      - name: Verify binaries
        run: |
          ls -la bin/
          # Verify all expected binaries exist
          test -f bin/lsp-gateway-linux
          test -f bin/lsp-gateway-macos
          test -f bin/lsp-gateway-macos-arm64
          test -f bin/lsp-gateway-windows.exe

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: bin/
          retention-days: 7

  # Test result summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, build-verification]
    if: always()
    
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Matrix Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Verification | ${{ needs.build-verification.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "${{ needs.quality-checks.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-tests.result }}" == "success" && \
                "${{ needs.build-verification.result }}" == "success" ]]; then
            echo "✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Some tests failed. Check individual job results." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi