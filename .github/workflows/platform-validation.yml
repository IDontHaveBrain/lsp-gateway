name: Platform Validation

on:
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC
  workflow_dispatch:
    inputs:
      validation_type:
        description: 'Validation type'
        required: false
        default: 'comprehensive'
        type: choice
        options:
        - basic
        - comprehensive
        - full

env:
  GO_VERSION: 1.24

jobs:
  # Validate platform detection across different environments
  platform-detection:
    name: Platform Detection Validation
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Latest runners
          - runner: ubuntu-latest
            expected_os: linux
            expected_arch: amd64
            
          - runner: windows-latest
            expected_os: windows
            expected_arch: amd64
            
          - runner: macos-latest
            expected_os: darwin
            expected_arch: arm64
            
          # Older runners for compatibility
          - runner: ubuntu-20.04
            expected_os: linux
            expected_arch: amd64
            
          - runner: windows-2019
            expected_os: windows
            expected_arch: amd64
            
          - runner: macos-13
            expected_os: darwin
            expected_arch: amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Validate platform detection
      run: |
        echo "Validating platform detection on ${{ matrix.runner }}"
        
        # Test platform detection functions
        go test -v ./internal/platform -run "TestGetCurrentPlatform"
        go test -v ./internal/platform -run "TestGetCurrentArchitecture"
        go test -v ./internal/platform -run "TestPlatformBooleanFunctions"
        
        # Verify detection matches expectations
        DETECTED_OS=$(go run -c 'package main; import ("fmt"; "lsp-gateway/internal/platform"); func main() { fmt.Print(platform.GetCurrentPlatform()) }')
        DETECTED_ARCH=$(go run -c 'package main; import ("fmt"; "lsp-gateway/internal/platform"); func main() { fmt.Print(platform.GetCurrentArchitecture()) }')
        
        echo "Runner: ${{ matrix.runner }}"
        echo "Expected OS: ${{ matrix.expected_os }}, Detected: ${DETECTED_OS}"
        echo "Expected Arch: ${{ matrix.expected_arch }}, Detected: ${DETECTED_ARCH}"
        
        # Validation will be done by the test suite
      shell: bash

    - name: Test platform-specific paths
      run: |
        echo "Testing platform-specific path handling"
        go test -v ./internal/platform -run "TestGetHomeDirectory"
        go test -v ./internal/platform -run "TestGetTempDirectory"
        go test -v ./internal/platform -run "TestGetExecutableExtension"

    - name: Test shell detection
      run: |
        echo "Testing shell detection on ${{ matrix.runner }}"
        go test -v ./internal/platform -run "TestSupportsShell"

  # Test package manager availability across platforms
  package-manager-validation:
    name: Package Manager Validation  
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            test_managers: ["apt"]
            
          - os: ubuntu-20.04
            platform: linux  
            test_managers: ["apt"]
            
          - os: windows-latest
            platform: windows
            test_managers: ["winget"]
            
          - os: windows-2019
            platform: windows
            test_managers: ["winget"]
            
          - os: macos-latest
            platform: darwin
            test_managers: ["brew"]
            
          - os: macos-13
            platform: darwin
            test_managers: ["brew"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Test package manager detection
      run: |
        echo "Testing package manager detection on ${{ matrix.platform }}"
        
        # Run package manager tests
        go test -v ./internal/platform -run "TestGetAvailablePackageManagers"
        go test -v ./internal/platform -run "TestGetBestPackageManager"

    - name: Validate expected package managers
      run: |
        echo "Validating expected package managers for ${{ matrix.platform }}"
        
        # Test specific managers that should be available
        for manager in ${{ join(matrix.test_managers, ' ') }}; do
          echo "Checking for $manager..."
          case "$manager" in
            apt)
              if command -v apt-get >/dev/null 2>&1; then
                echo "✓ apt-get found"
              else
                echo "✗ apt-get not found"
              fi
              ;;
            winget)
              if command -v winget >/dev/null 2>&1; then
                echo "✓ winget found"
              else
                echo "✗ winget not found (may not be available on older Windows)"
              fi
              ;;
            brew)
              if command -v brew >/dev/null 2>&1; then
                echo "✓ brew found"
              else
                echo "✗ brew not found (expected on fresh runners)"
              fi
              ;;
          esac
        done

  # Command executor validation across platforms
  command-executor-validation:
    name: Command Executor Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Test command executor
      run: |
        echo "Testing command executor on $(go env GOOS)"
        
        # Run command executor tests
        go test -v ./internal/platform -run "TestNewCommandExecutor"
        go test -v ./internal/platform -run "TestExecuteBasicCommand"
        go test -v ./internal/platform -run "TestGetShell"

    - name: Test platform-specific commands
      run: |
        echo "Testing platform-specific command execution"
        go test -v ./internal/platform -run "TestCommandExecutorCrossPlatform"

  # Binary build validation for all target platforms
  binary-build-validation:
    name: Binary Build Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Test cross-platform builds
      run: |
        echo "Testing cross-platform binary builds"
        
        # Test the build system
        make clean
        make build
        
        # Verify all expected binaries were created
        echo "Verifying built binaries..."
        make check

    - name: Run binary validation tests
      run: |
        echo "Running binary validation tests"
        go test -v ./internal/platform -run "TestBinaryFileStructure"
        go test -v ./internal/platform -run "TestBinaryCompatibilityMatrix"

    - name: Test native binary execution
      run: |
        echo "Testing native binary execution"
        go test -v ./internal/platform -run "TestBinaryExecutionCompatibility"

  # Configuration validation across platforms
  config-validation:
    name: Configuration Validation
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Test configuration loading
      run: |
        echo "Testing configuration on $(go env GOOS)"
        go test -v ./internal/config

    - name: Test cross-platform config compatibility
      run: |
        echo "Testing cross-platform configuration compatibility"
        go test -v ./internal/platform -run "TestCrossPlatformConfiguration"

    - name: Create platform-specific test config
      run: |
        echo "Creating and testing platform-specific configuration"
        
        # Create test directory with platform-appropriate path
        case "$(go env GOOS)" in
          windows)
            mkdir "test-config"
            cp config.yaml "test-config\\test-config.yaml"
            CONFIG_PATH="test-config\\test-config.yaml"
            ;;
          *)
            mkdir -p test-config
            cp config.yaml test-config/test-config.yaml
            CONFIG_PATH="test-config/test-config.yaml"
            ;;
        esac
        
        # Test config validation with local binary
        make local
        ./bin/lsp-gateway config validate --config="$CONFIG_PATH"

  # Integration validation combining all platforms
  integration-validation:
    name: Integration Validation
    needs: [platform-detection, package-manager-validation, command-executor-validation, binary-build-validation, config-validation]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate validation report
      run: |
        echo "## Platform Validation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job results
        PLATFORM_DETECTION="${{ needs.platform-detection.result }}"
        PACKAGE_MANAGER="${{ needs.package-manager-validation.result }}"
        COMMAND_EXECUTOR="${{ needs.command-executor-validation.result }}"
        BINARY_BUILD="${{ needs.binary-build-validation.result }}"
        CONFIG_VALIDATION="${{ needs.config-validation.result }}"
        
        echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Platform Detection | ${PLATFORM_DETECTION} |" >> $GITHUB_STEP_SUMMARY
        echo "| Package Manager | ${PACKAGE_MANAGER} |" >> $GITHUB_STEP_SUMMARY
        echo "| Command Executor | ${COMMAND_EXECUTOR} |" >> $GITHUB_STEP_SUMMARY
        echo "| Binary Build | ${BINARY_BUILD} |" >> $GITHUB_STEP_SUMMARY
        echo "| Configuration | ${CONFIG_VALIDATION} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Overall status
        if [ "$PLATFORM_DETECTION" = "success" ] && \
           [ "$PACKAGE_MANAGER" = "success" ] && \
           [ "$COMMAND_EXECUTOR" = "success" ] && \
           [ "$BINARY_BUILD" = "success" ] && \
           [ "$CONFIG_VALIDATION" = "success" ]; then
          echo "### ✅ Overall Status: PASS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All platform validation tests passed successfully." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Overall Status: FAIL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some platform validation tests failed. Check individual job results for details." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platforms Validated" >> $GITHUB_STEP_SUMMARY
        echo "- Linux (Ubuntu 20.04, 22.04)" >> $GITHUB_STEP_SUMMARY
        echo "- Windows (2019, 2022)" >> $GITHUB_STEP_SUMMARY
        echo "- macOS (Intel, ARM)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Platform detection and identification" >> $GITHUB_STEP_SUMMARY
        echo "- Package manager availability and detection" >> $GITHUB_STEP_SUMMARY
        echo "- Command execution across different shells" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-platform binary compilation" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration file compatibility" >> $GITHUB_STEP_SUMMARY

    - name: Check for failures
      run: |
        # Exit with error if any critical validation failed
        if [ "${{ needs.platform-detection.result }}" != "success" ] || \
           [ "${{ needs.binary-build-validation.result }}" != "success" ]; then
          echo "Critical validation tests failed"
          exit 1
        fi
        
        echo "Platform validation completed successfully"