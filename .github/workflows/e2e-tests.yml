name: E2E Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  e2e-tests:
    name: End-to-End Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.0'
        check-latest: true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache Java LSP server (JDK + Eclipse JDT) - Linux/macOS
      if: runner.os != 'Windows'
      id: cache-java-lsp-unix
      uses: actions/cache@v4
      with:
        path: |
          ~/.lsp-gateway/tools/java
        key: ${{ runner.os }}-java-lsp-v1
        restore-keys: |
          ${{ runner.os }}-java-lsp-

    - name: Cache Java LSP server (JDK + Eclipse JDT) - Windows
      if: runner.os == 'Windows'
      id: cache-java-lsp-windows
      uses: actions/cache@v4
      with:
        path: |
          ~\.lsp-gateway\tools\java
        key: ${{ runner.os }}-java-lsp-v1
        restore-keys: |
          ${{ runner.os }}-java-lsp-

    - name: Install Go dependencies
      run: go mod download

    - name: Build LSP Gateway - Linux/macOS
      if: runner.os != 'Windows'
      run: |
        # Explicitly build for the current platform architecture
        if [ "${{ runner.os }}" = "Linux" ]; then
          GOOS=linux GOARCH=amd64 go build -tags "cache_enabled" -o bin/lsp-gateway ./src/cmd/lsp-gateway
        elif [ "${{ runner.os }}" = "macOS" ]; then
          # macOS runners can be either amd64 or arm64
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            GOOS=darwin GOARCH=amd64 go build -tags "cache_enabled" -o bin/lsp-gateway ./src/cmd/lsp-gateway
          else
            GOOS=darwin GOARCH=arm64 go build -tags "cache_enabled" -o bin/lsp-gateway ./src/cmd/lsp-gateway
          fi
        fi
        
        # Make the binary executable
        chmod +x bin/lsp-gateway
        
        # Verify the binary was built correctly
        file bin/lsp-gateway
        ls -la bin/

    - name: Build LSP Gateway - Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Create necessary directories first
        if (!(Test-Path bin)) {
          New-Item -ItemType Directory -Path bin
        }
        
        # Build for Windows with cache support
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"
        go build -tags "cache_enabled" -o bin\lsp-gateway.exe .\src\cmd\lsp-gateway
        
        # Verify the binary was built correctly
        Get-ChildItem bin\

    - name: Install LSP servers - Linux/macOS
      if: runner.os != 'Windows'
      run: |
        # Install Go LSP server
        go install golang.org/x/tools/gopls@latest
        
        # Install Python LSP server
        pip install python-lsp-server
        
        # Install TypeScript/JavaScript LSP server
        npm install -g typescript-language-server typescript
        
        # Install Java LSP server only if not cached
        if [ "${{ steps.cache-java-lsp-unix.outputs.cache-hit }}" != "true" ]; then
          echo "üì¶ Installing Java LSP server (JDK + Eclipse JDT)..."
          if timeout 25m ./bin/lsp-gateway install java; then
            echo "‚úÖ Java LSP server installation completed"
          else
            echo "‚ùå Java LSP server installation failed or timed out"
            exit 1
          fi
        else
          echo "‚úÖ Using cached Java LSP server (JDK + Eclipse JDT)"
        fi
        
        # Verify installations
        echo "Checking LSP server installations..."
        gopls version || echo "gopls installation failed"
        pylsp --version || echo "pylsp installation failed"
        typescript-language-server --version || echo "typescript-language-server installation failed"
        
        # Check Java installation
        ./bin/lsp-gateway status

    - name: Install LSP servers - Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        # Install Go LSP server
        go install golang.org/x/tools/gopls@latest
        
        # Install Python LSP server
        pip install python-lsp-server
        
        # Install TypeScript/JavaScript LSP server
        npm install -g typescript-language-server typescript
        
        # Install Java LSP server only if not cached
        $cacheHit = "${{ steps.cache-java-lsp-windows.outputs.cache-hit }}"
        if ($cacheHit -ne "true") {
          Write-Host "üì¶ Installing Java LSP server (JDK + Eclipse JDT)..."
          $process = Start-Process -FilePath ".\bin\lsp-gateway.exe" -ArgumentList "install", "java" -PassThru -NoNewWindow -Wait
          if ($process.ExitCode -eq 0) {
            Write-Host "‚úÖ Java LSP server installation completed"
          } else {
            Write-Host "‚ùå Java LSP server installation failed"
            exit 1
          }
        } else {
          Write-Host "‚úÖ Using cached Java LSP server (JDK + Eclipse JDT)"
        }
        
        # Verify installations
        Write-Host "Checking LSP server installations..."
        gopls version
        pylsp --version
        typescript-language-server --version
        
        # Check Java installation
        .\bin\lsp-gateway.exe status

    - name: Run E2E tests - Linux/macOS
      if: runner.os != 'Windows'
      run: |
        cd tests/e2e
        
        # Set exit code tracking
        EXIT_CODE=0
        
        # Run Go E2E tests
        echo "üß™ Running Go E2E tests..."
        if go test -v -timeout 600s -run "TestGoRealClientComprehensiveE2ETestSuite" .; then
          echo "‚úÖ Go E2E tests passed"
        else
          echo "‚ùå Go E2E tests failed"
          EXIT_CODE=1
        fi
        
        # Run Python E2E tests
        echo "üß™ Running Python E2E tests..."
        if go test -v -timeout 600s -run "TestPythonRealClientComprehensiveE2ETestSuite" .; then
          echo "‚úÖ Python E2E tests passed"
        else
          echo "‚ùå Python E2E tests failed"
          EXIT_CODE=1
        fi
        
        # Run TypeScript E2E tests
        echo "üß™ Running TypeScript E2E tests..."
        if go test -v -timeout 600s -run "TestTypeScriptRealClientComprehensiveE2ETestSuite" .; then
          echo "‚úÖ TypeScript E2E tests passed"
        else
          echo "‚ùå TypeScript E2E tests failed"
          EXIT_CODE=1
        fi
        
        # Run JavaScript E2E tests
        echo "üß™ Running JavaScript E2E tests..."
        if go test -v -timeout 600s -run "TestJavaScriptRealClientComprehensiveE2ETestSuite" .; then
          echo "‚úÖ JavaScript E2E tests passed"
        else
          echo "‚ùå JavaScript E2E tests failed"
          EXIT_CODE=1
        fi
        
        # Java E2E tests
        echo "üß™ Running Java E2E tests..."
        if go test -v -timeout 600s -run "TestJavaRealClientComprehensiveE2ETestSuite" .; then
          echo "‚úÖ Java E2E tests passed"
        else
          echo "‚ùå Java E2E tests failed"
          EXIT_CODE=1
        fi
        
        # Summary
        if [ $EXIT_CODE -eq 0 ]; then
          echo "üéâ All E2E tests passed (Go, Python, TypeScript, JavaScript, Java)!"
        else
          echo "üí• Some E2E tests failed - see logs above for details"
          exit $EXIT_CODE
        fi

    - name: Run E2E tests - Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cd tests\e2e
        
        # Set exit code tracking
        $exitCode = 0
        
        # Run Go E2E tests
        Write-Host "üß™ Running Go E2E tests..."
        go test -v -timeout 600s -run "TestGoRealClientComprehensiveE2ETestSuite" .
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Go E2E tests passed"
        } else {
          Write-Host "‚ùå Go E2E tests failed"
          $exitCode = 1
        }
        
        # Run Python E2E tests
        Write-Host "üß™ Running Python E2E tests..."
        go test -v -timeout 600s -run "TestPythonRealClientComprehensiveE2ETestSuite" .
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Python E2E tests passed"
        } else {
          Write-Host "‚ùå Python E2E tests failed"
          $exitCode = 1
        }
        
        # Run TypeScript E2E tests
        Write-Host "üß™ Running TypeScript E2E tests..."
        go test -v -timeout 600s -run "TestTypeScriptRealClientComprehensiveE2ETestSuite" .
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ TypeScript E2E tests passed"
        } else {
          Write-Host "‚ùå TypeScript E2E tests failed"
          $exitCode = 1
        }
        
        # Run JavaScript E2E tests
        Write-Host "üß™ Running JavaScript E2E tests..."
        go test -v -timeout 600s -run "TestJavaScriptRealClientComprehensiveE2ETestSuite" .
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ JavaScript E2E tests passed"
        } else {
          Write-Host "‚ùå JavaScript E2E tests failed"
          $exitCode = 1
        }
        
        # Java E2E tests
        Write-Host "üß™ Running Java E2E tests..."
        go test -v -timeout 600s -run "TestJavaRealClientComprehensiveE2ETestSuite" .
        if ($LASTEXITCODE -eq 0) {
          Write-Host "‚úÖ Java E2E tests passed"
        } else {
          Write-Host "‚ùå Java E2E tests failed"
          $exitCode = 1
        }
        
        # Summary
        if ($exitCode -eq 0) {
          Write-Host "üéâ All E2E tests passed (Go, Python, TypeScript, JavaScript, Java)!"
        } else {
          Write-Host "üí• Some E2E tests failed - see logs above for details"
          exit $exitCode
        }

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/e2e/test_results.log
          tests/e2e/*.log
        retention-days: 7

    - name: Upload test repositories
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: test-repositories
        path: |
          /tmp/lsp-gateway-test-repos/
        retention-days: 3

  build-quality:
    name: Build Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.0'
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Run quality checks
      run: |
        make format
        make vet
        
        # Check if code is properly formatted
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not formatted. Please run 'make format'"
          exit 1
        fi

    - name: Build for all platforms
      run: make build

    - name: Run unit tests
      run: make test-unit

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: bin/
        retention-days: 7