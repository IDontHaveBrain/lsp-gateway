name: Security Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  GO_VERSION: 1.24

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-security-
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: make deps

    - name: Install gosec
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: Create reports directory
      run: mkdir -p reports

    - name: Run comprehensive security scan
      run: |
        echo "=== Comprehensive Security Analysis ==="
        
        # Generate detailed reports in multiple formats
        echo "Generating JSON report..."
        gosec -fmt json -out reports/security-detailed.json ./... || true
        
        echo "Generating text report..."
        gosec -fmt text -out reports/security-detailed.txt ./... || true
        
        echo "Generating SARIF report for GitHub Security tab..."
        gosec -fmt sarif -out reports/security.sarif ./... || true
        
        echo "Generating CSV report..."
        gosec -fmt csv -out reports/security.csv ./... || true
        
        # Summary scan with strict settings for CI failure
        echo "Running strict security check..."
        gosec -severity high -confidence high -quiet ./... > reports/security-strict.txt || echo "High severity issues found"
        
        echo "=== Security Scan Complete ==="

    - name: Analyze security results
      id: security-analysis
      run: |
        # Count issues by severity
        if [ -f reports/security-detailed.json ]; then
          TOTAL_ISSUES=$(jq '.Stats.found // 0' reports/security-detailed.json)
          HIGH_ISSUES=$(jq '[.Issues[] | select(.severity == "HIGH")] | length' reports/security-detailed.json)
          MEDIUM_ISSUES=$(jq '[.Issues[] | select(.severity == "MEDIUM")] | length' reports/security-detailed.json)
          LOW_ISSUES=$(jq '[.Issues[] | select(.severity == "LOW")] | length' reports/security-detailed.json)
          
          echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
          echo "high_issues=$HIGH_ISSUES" >> $GITHUB_OUTPUT
          echo "medium_issues=$MEDIUM_ISSUES" >> $GITHUB_OUTPUT
          echo "low_issues=$LOW_ISSUES" >> $GITHUB_OUTPUT
          
          # Determine if we should fail the build
          if [ "$HIGH_ISSUES" -gt 10 ]; then
            echo "fail_build=true" >> $GITHUB_OUTPUT
            echo "failure_reason=Too many high severity issues ($HIGH_ISSUES > 10)" >> $GITHUB_OUTPUT
          elif [ "$TOTAL_ISSUES" -gt 100 ]; then
            echo "fail_build=true" >> $GITHUB_OUTPUT
            echo "failure_reason=Total issues exceed threshold ($TOTAL_ISSUES > 100)" >> $GITHUB_OUTPUT
          else
            echo "fail_build=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "total_issues=0" >> $GITHUB_OUTPUT
          echo "high_issues=0" >> $GITHUB_OUTPUT
          echo "medium_issues=0" >> $GITHUB_OUTPUT
          echo "low_issues=0" >> $GITHUB_OUTPUT
          echo "fail_build=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload security SARIF to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/security.sarif
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          reports/security-*.*
        retention-days: 90

    - name: Generate security summary
      run: |
        cat > security-summary.md << 'EOF'
        # üîí Security Analysis Summary
        
        **Scan Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        **Total Issues:** ${{ steps.security-analysis.outputs.total_issues }}
        
        ## Issue Breakdown
        
        | Severity | Count |
        |----------|-------|
        | üî¥ High | ${{ steps.security-analysis.outputs.high_issues }} |
        | üü° Medium | ${{ steps.security-analysis.outputs.medium_issues }} |
        | üü¢ Low | ${{ steps.security-analysis.outputs.low_issues }} |
        
        ## Analysis Details
        
        - **Scanner:** gosec v$(gosec --version 2>&1 | grep -o 'v[0-9.]*' || echo 'latest')
        - **Go Version:** ${{ env.GO_VERSION }}
        - **Scan Scope:** Full codebase analysis
        
        ## Reports Generated
        
        - üìä Detailed JSON Report
        - üìù Text Summary Report  
        - üîç SARIF Report (GitHub Security)
        - üìà CSV Data Export
        
        ## Build Status
        
        ${{ steps.security-analysis.outputs.fail_build == 'true' && '‚ùå **Build Failed**' || '‚úÖ **Build Passed**' }}
        
        ${{ steps.security-analysis.outputs.fail_build == 'true' && format('**Reason:** {0}', steps.security-analysis.outputs.failure_reason) || '' }}
        
        ## Recommendations
        
        - Review high severity issues first
        - Consider adding `//nolint:gosec` comments for false positives
        - Update dependencies regularly
        - Follow secure coding practices
        
        ---
        
        üìã [View detailed reports in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
        EOF

    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            // Find existing security comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('üîí Security Analysis Summary')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
          } catch (error) {
            console.error('Error creating security comment:', error);
          }

    - name: Fail build if security thresholds exceeded
      if: steps.security-analysis.outputs.fail_build == 'true'
      run: |
        echo "‚ùå Security scan failed: ${{ steps.security-analysis.outputs.failure_reason }}"
        echo "Please review and address high severity security issues before proceeding."
        echo "You can view detailed reports in the job artifacts."
        exit 1

    - name: Security scan passed
      if: steps.security-analysis.outputs.fail_build != 'true'
      run: |
        echo "‚úÖ Security scan passed!"
        echo "Total issues: ${{ steps.security-analysis.outputs.total_issues }}"
        echo "High severity: ${{ steps.security-analysis.outputs.high_issues }}"
        echo "Security reports uploaded as artifacts for review."