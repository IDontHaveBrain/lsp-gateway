# Java Language Test Scenarios for LSP Gateway
# Simple, focused test cases using Spring Boot patterns

name: "Java LSP Scenarios"
description: "Simple Java language server testing scenarios"
language: "java"
tags: ["java", "spring-boot", "simple"]

# Test scenarios for Java using Spring Boot repository patterns
scenarios:
  # ===================
  # DEFINITION SCENARIOS
  # ===================
  
  - id: "java_def_annotation"
    name: "Go to Definition - Spring Boot Annotation"
    description: "Navigate from @SpringBootApplication to annotation definition"
    method: "textDocument/definition"
    repository: "spring-boot"
    file: "spring-boot-samples/spring-boot-sample-web/src/main/java/sample/web/SampleWebApplication.java"
    position: 
      line: 30  # @SpringBootApplication annotation
      character: 8
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "**/SpringBootApplication.java"
    tags: ["definition", "annotation", "spring-boot"]
  
  - id: "java_def_method_call"
    name: "Go to Definition - Method Call"
    description: "Navigate to method definition in same class"
    method: "textDocument/definition"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 200  # Method call
      character: 15
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "method", "java"]
    
  - id: "java_def_import_class"
    name: "Go to Definition - Imported Class"
    description: "Navigate to imported class definition"
    method: "textDocument/definition"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java"
    position:
      line: 10  # Import statement
      character: 25
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "import", "class"]

  # ===================
  # REFERENCES SCENARIOS  
  # ===================
  
  - id: "java_ref_interface_usage"
    name: "Find References - Interface Usage"
    description: "Find all implementations of a common interface"
    method: "textDocument/references"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ApplicationRunner.java"
    position:
      line: 35  # ApplicationRunner interface
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 5  # Interface implementations
        include_declaration: true
    tags: ["references", "interface", "spring-boot"]

  - id: "java_ref_class_usage"
    name: "Find References - Class Usage"
    description: "Find all references to a commonly used class"
    method: "textDocument/references"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 80  # SpringApplication class
      character: 10
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 10  # SpringApplication is widely used
        include_declaration: true
    tags: ["references", "class", "spring-boot"]

  - id: "java_ref_method_calls"
    name: "Find References - Method Calls"
    description: "Find all calls to a public method"
    method: "textDocument/references"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 150  # run method
      character: 10
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 8  # run() method is commonly called
        include_declaration: false
    tags: ["references", "method", "spring-boot"]

  # ===================
  # HOVER SCENARIOS
  # ===================
  
  - id: "java_hover_annotation_info"
    name: "Hover - Spring Boot Annotation"
    description: "Get hover info for Spring Boot annotation"
    method: "textDocument/hover"
    repository: "spring-boot"
    file: "spring-boot-samples/spring-boot-sample-web/src/main/java/sample/web/SampleWebApplication.java"
    position:
      line: 30  # @SpringBootApplication annotation
      character: 8
    expected:
      success: true
      hover:
        has_content: true
        contains: ["SpringBootApplication", "annotation", "@Target"]
        format: "markdown"
    tags: ["hover", "annotation", "spring-boot"]

  - id: "java_hover_method_signature"
    name: "Hover - Method Signature"
    description: "Get hover info for method with parameters"
    method: "textDocument/hover"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 250  # Method with parameters
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        format: "markdown"
    tags: ["hover", "method", "signature"]

  - id: "java_hover_class_info"
    name: "Hover - Class Information"
    description: "Get hover info for class with documentation"
    method: "textDocument/hover"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 80  # SpringApplication class
      character: 10
    expected:
      success: true
      hover:
        has_content: true
        contains: ["SpringApplication", "class"]
        format: "markdown"
    tags: ["hover", "class", "documentation"]

  # ===================
  # DOCUMENT SYMBOLS SCENARIOS
  # ===================
  
  - id: "java_docsym_spring_application"
    name: "Document Symbols - Spring Application Class"
    description: "Get all symbols from Spring Application class file"
    method: "textDocument/documentSymbol"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 20  # SpringApplication has many methods and fields
        types: ["class", "method", "field", "constructor"]
    tags: ["symbols", "document", "spring-boot", "application"]

  - id: "java_docsym_sample_controller"
    name: "Document Symbols - Sample Controller"
    description: "Get symbols from a Spring Boot controller"
    method: "textDocument/documentSymbol"
    repository: "spring-boot"
    file: "spring-boot-samples/spring-boot-sample-web/src/main/java/sample/web/SampleController.java"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 5  # Controller with methods and annotations
        types: ["class", "method", "annotation"]
    tags: ["symbols", "document", "controller", "web"]

  - id: "java_docsym_configuration_class"
    name: "Document Symbols - Configuration Class"
    description: "Get symbols from Spring configuration class"
    method: "textDocument/documentSymbol"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 15  # Configuration class with @Bean methods
        types: ["class", "method", "annotation"]
    tags: ["symbols", "document", "configuration", "auto-config"]

  # ===================
  # WORKSPACE SYMBOLS SCENARIOS
  # ===================
  
  - id: "java_worksym_controller_search"
    name: "Workspace Symbol Search - Controller"
    description: "Search for Controller-related symbols across workspace"
    method: "workspace/symbol"
    repository: "spring-boot"
    query: "Controller"
    expected:
      success: true
      symbols:
        min_count: 10  # Controller classes and interfaces
        types: ["class", "interface", "annotation"]
    tags: ["symbols", "workspace", "controller", "spring-boot"]

  - id: "java_worksym_application_search"
    name: "Workspace Symbol Search - Application"
    description: "Search for Application symbols"
    method: "workspace/symbol"
    repository: "spring-boot"
    query: "Application"
    expected:
      success: true
      symbols:
        min_count: 15  # Various application-related classes
        types: ["class", "interface", "annotation"]
    tags: ["symbols", "workspace", "application"]

  - id: "java_worksym_service_search"
    name: "Workspace Symbol Search - Service"
    description: "Search for Service-related symbols"
    method: "workspace/symbol"
    repository: "spring-boot"
    query: "Service"
    expected:
      success: true
      symbols:
        min_count: 8  # Service classes and annotations
        types: ["class", "interface", "annotation"]
    tags: ["symbols", "workspace", "service"]

# Performance test cases
performance_tests:
  - id: "java_perf_large_class"
    name: "Performance - Large Spring Boot Class"
    description: "Test performance on large Spring Boot class"
    method: "textDocument/definition"
    repository: "spring-boot"
    file: "spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java"
    position:
      line: 300
      character: 20
    timeout: "10s"
    expected:
      success: true
      definition:
        has_location: true
    tags: ["performance", "large-file", "spring-boot"]

  - id: "java_perf_workspace_symbols"
    name: "Performance - Large Workspace Symbol Search"
    description: "Test workspace symbol search performance"
    method: "workspace/symbol"
    repository: "spring-boot"
    query: "Auto"  # Should match many auto-configuration classes
    timeout: "15s"
    expected:
      success: true
      symbols:
        min_count: 50
    tags: ["performance", "workspace", "large-result"]

# Test repository configuration
test_repositories:
  spring-boot:
    path: "./test-repositories/java/spring-boot"
    description: "Spring Boot framework repository"
    setup:
      commands:
        - "./gradlew :spring-boot-project:spring-boot:compileJava -x test --no-daemon"
        - "./gradlew :spring-boot-project:spring-boot-autoconfigure:compileJava -x test --no-daemon"
      timeout: "15m"
      env:
        JAVA_HOME: "/usr/lib/jvm/java-17-openjdk"
        GRADLE_OPTS: "-Xmx2048m -XX:MaxMetaspaceSize=512m"