# Python Language Test Scenarios for LSP Gateway
# Simple, focused test cases using Django and Flask patterns

name: "Python LSP Scenarios"
description: "Simple Python language server testing scenarios"
language: "python"
tags: ["python", "django", "simple"]

# Test scenarios for Python using Django and Flask repository patterns
scenarios:
  # ===================
  # DEFINITION SCENARIOS
  # ===================
  
  - id: "py_def_class_inheritance"
    name: "Go to Definition - Class Inheritance"
    description: "Navigate from child class to parent class definition"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/base.py"
    position: 
      line: 100  # Example: Model class inheritance
      character: 15
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "django/db/models/base.py"
    tags: ["definition", "inheritance", "django", "class"]
  
  - id: "py_def_method_override"
    name: "Go to Definition - Method Override"
    description: "Navigate to overridden method definition"
    method: "textDocument/definition"
    repository: "django"
    file: "django/contrib/admin/models.py"
    position:
      line: 80  # Example: save method override
      character: 10
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "method", "override", "django"]
    
  - id: "py_def_import_module"
    name: "Go to Definition - Module Import"
    description: "Navigate to imported module definition"
    method: "textDocument/definition"
    repository: "django"
    file: "django/views/generic/base.py"
    position:
      line: 10  # Import statement
      character: 20
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "import", "module"]

  # ===================
  # REFERENCES SCENARIOS  
  # ===================
  
  - id: "py_ref_django_model_usage"
    name: "Find References - Django Model Usage"
    description: "Find all references to a Django model"
    method: "textDocument/references"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 350  # Example: User model
      character: 10
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 50  # User model is widely referenced
        include_declaration: true
    tags: ["references", "django", "model", "auth"]

  - id: "py_ref_method_calls"
    name: "Find References - Method Calls"
    description: "Find all references to a commonly used method"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/base.py"
    position:
      line: 800  # Example: save method
      character: 10
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 30  # save() is commonly used
        include_declaration: true
    tags: ["references", "method", "django", "model"]

  - id: "py_ref_class_attribute"
    name: "Find References - Class Attribute"
    description: "Find all references to class attribute"
    method: "textDocument/references"
    repository: "django"
    file: "django/db/models/fields/__init__.py"
    position:
      line: 200  # Example: CharField
      character: 10
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 20
        include_declaration: false
    tags: ["references", "attribute", "class", "django"]

  # ===================
  # HOVER SCENARIOS
  # ===================
  
  - id: "py_hover_django_field"
    name: "Hover - Django Model Field"
    description: "Get hover info for Django model field"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/fields/__init__.py"
    position:
      line: 1200  # Example: CharField definition
      character: 10
    expected:
      success: true
      hover:
        has_content: true
        contains: ["CharField", "string", "max_length", "field"]
        format: "markdown"
    tags: ["hover", "django", "model", "field"]

  - id: "py_hover_builtin_function"
    name: "Hover - Python Built-in Function"
    description: "Get hover info for Python built-in function"
    method: "textDocument/hover"
    repository: "django"
    file: "django/utils/encoding.py"
    position:
      line: 50  # Using built-in function like str()
      character: 10
    expected:
      success: true
      hover:
        has_content: true
        contains: ["str", "string", "object"]
        format: "markdown"
    tags: ["hover", "builtin", "function"]

  - id: "py_hover_class_method"
    name: "Hover - Class Method Signature"
    description: "Get hover info for class method with parameters"
    method: "textDocument/hover"
    repository: "django"
    file: "django/db/models/query.py"
    position:
      line: 400  # Example: QuerySet method
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        format: "markdown"
    tags: ["hover", "class", "method", "signature"]

  # ===================
  # DOCUMENT SYMBOLS SCENARIOS
  # ===================
  
  - id: "py_docsym_django_model"
    name: "Document Symbols - Django Model File"
    description: "Get all symbols from a Django model file"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/contrib/auth/models.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 20  # Model files have classes, methods, fields
        types: ["class", "function", "variable"]
    tags: ["symbols", "document", "django", "model"]

  - id: "py_docsym_views_file"
    name: "Document Symbols - Django Views File"
    description: "Get symbols from Django views file"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/views/generic/base.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 15  # Views have classes and methods
        types: ["class", "function", "variable"]
    tags: ["symbols", "document", "django", "views"]

  - id: "py_docsym_utility_module"
    name: "Document Symbols - Utility Module"
    description: "Get symbols from utility module"
    method: "textDocument/documentSymbol"
    repository: "django"
    file: "django/utils/text.py"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 10
        types: ["function", "variable", "class"]
    tags: ["symbols", "document", "utility"]

  # ===================
  # WORKSPACE SYMBOLS SCENARIOS
  # ===================
  
  - id: "py_worksym_model_search"
    name: "Workspace Symbol Search - Model"
    description: "Search for Model-related symbols across workspace"
    method: "workspace/symbol"
    repository: "django"
    query: "Model"
    expected:
      success: true
      symbols:
        min_count: 50  # Model is used extensively in Django
        types: ["class", "function", "variable"]
    tags: ["symbols", "workspace", "search", "django"]

  - id: "py_worksym_view_search"
    name: "Workspace Symbol Search - View"
    description: "Search for View symbols"
    method: "workspace/symbol"
    repository: "django"
    query: "View"
    expected:
      success: true
      symbols:
        min_count: 20
        types: ["class", "function"]
    tags: ["symbols", "workspace", "view"]

  - id: "py_worksym_function_search"
    name: "Workspace Symbol Search - Function Name"
    description: "Search for specific function name"
    method: "workspace/symbol"
    repository: "django"
    query: "render"
    expected:
      success: true
      symbols:
        min_count: 15
        types: ["function"]
    tags: ["symbols", "workspace", "function"]

# Performance test cases
performance_tests:
  - id: "py_perf_large_module"
    name: "Performance - Large Python Module"
    description: "Test performance on large Python modules"
    method: "textDocument/definition"
    repository: "django"
    file: "django/db/models/base.py"  # Large complex file
    position:
      line: 1000
      character: 10
    timeout: "10s"
    expected:
      success: true
      definition:
        has_location: true
    tags: ["performance", "large-file"]

  - id: "py_perf_workspace_symbols"
    name: "Performance - Large Workspace Symbol Search"
    description: "Test workspace symbol search performance"
    method: "workspace/symbol"
    repository: "django"
    query: "Model"  # Should match many model-related symbols
    timeout: "15s"
    expected:
      success: true
      symbols:
        min_count: 50
    tags: ["performance", "workspace", "large-result"]

# Test repository configuration
test_repositories:
  django:
    path: "./test-repositories/python/django"
    description: "Django web framework repository"
    setup:
      commands:
        - "python -m pip install -e ."
        - "python -m pip install -r tests/requirements/py3.txt"
      timeout: "10m"
      env:
        DJANGO_SETTINGS_MODULE: "django.conf.global_settings"