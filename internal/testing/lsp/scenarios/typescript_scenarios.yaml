# TypeScript Language Test Scenarios for LSP Gateway
# Simple, focused test cases using VSCode and TypeScript patterns

name: "TypeScript LSP Scenarios"
description: "Simple TypeScript language server testing scenarios"
language: "typescript"
tags: ["typescript", "vscode", "simple"]

# Test scenarios for TypeScript using VSCode and TypeScript repository patterns
scenarios:
  # ===================
  # DEFINITION SCENARIOS
  # ===================
  
  - id: "ts_def_interface_implementation"
    name: "Go to Definition - Interface Implementation"
    description: "Navigate from interface usage to implementation"
    method: "textDocument/definition"
    repository: "vscode"
    file: "src/vs/editor/common/services/resolverService.ts"
    position: 
      line: 50  # Example: service interface implementation
      character: 20
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "src/vs/editor/common/services/"
    tags: ["definition", "interface", "vscode", "service"]
  
  - id: "ts_def_generic_type"
    name: "Go to Definition - Generic Type Parameter"
    description: "Navigate to generic type parameter definition"
    method: "textDocument/definition"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 200  # Example: generic type usage
      character: 15
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "generic", "typescript", "compiler"]
    
  - id: "ts_def_module_import"
    name: "Go to Definition - ES6 Module Import"
    description: "Navigate to imported module definition"
    method: "textDocument/definition"
    repository: "vscode"
    file: "src/vs/workbench/workbench.contribution.ts"
    position:
      line: 10  # Import statement
      character: 25
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "import", "module", "es6"]

  # ===================
  # REFERENCES SCENARIOS  
  # ===================
  
  - id: "ts_ref_interface_usage"
    name: "Find References - Interface Usage"
    description: "Find all implementations and usages of interface"
    method: "textDocument/references"
    repository: "vscode"
    file: "src/vs/editor/common/editorCommon.ts"
    position:
      line: 200  # Example: IEditor interface
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 30  # Editor interfaces are widely used
        include_declaration: true
    tags: ["references", "interface", "vscode", "editor"]

  - id: "ts_ref_method_calls"
    name: "Find References - Method Calls"
    description: "Find all references to a method"
    method: "textDocument/references"
    repository: "typescript"
    file: "src/compiler/checker.ts"
    position:
      line: 1000  # Example: checkExpression method
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 20  # Compiler methods are heavily used
        include_declaration: true
    tags: ["references", "method", "typescript", "compiler"]

  - id: "ts_ref_type_usage"
    name: "Find References - Type Usage"
    description: "Find all references to a type definition"
    method: "textDocument/references"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 100  # Example: Node type
      character: 10
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 50  # Node type is fundamental
        include_declaration: false
    tags: ["references", "type", "typescript"]

  # ===================
  # HOVER SCENARIOS
  # ===================
  
  - id: "ts_hover_interface_member"
    name: "Hover - Interface Member"
    description: "Get hover info for interface member with JSDoc"
    method: "textDocument/hover"
    repository: "vscode"
    file: "src/vs/editor/common/editorCommon.ts"
    position:
      line: 400  # Example: interface member with documentation
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["interface", "member", "@param", "@returns"]
        format: "markdown"
    tags: ["hover", "interface", "jsdoc", "vscode"]

  - id: "ts_hover_generic_function"
    name: "Hover - Generic Function"
    description: "Get hover info for generic function signature"
    method: "textDocument/hover"
    repository: "typescript"
    file: "src/compiler/utilities.ts"
    position:
      line: 200  # Example: generic utility function
      character: 10
    expected:
      success: true
      hover:
        has_content: true
        contains: ["function", "<T>", "generic"]
        format: "markdown"
    tags: ["hover", "generic", "function", "typescript"]

  - id: "ts_hover_enum_member"
    name: "Hover - Enum Member"
    description: "Get hover info for enum member"
    method: "textDocument/hover"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 300  # Example: SyntaxKind enum member
      character: 20
    expected:
      success: true
      hover:
        has_content: true
        contains: ["enum", "SyntaxKind"]
        format: "markdown"
    tags: ["hover", "enum", "member"]

  # ===================
  # DOCUMENT SYMBOLS SCENARIOS
  # ===================
  
  - id: "ts_docsym_service_class"
    name: "Document Symbols - VSCode Service Class"
    description: "Get all symbols from a VSCode service file"
    method: "textDocument/documentSymbol"
    repository: "vscode"
    file: "src/vs/workbench/services/editor/browser/editorService.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 20  # Service files have interfaces, classes, methods
        types: ["interface", "class", "method", "property", "constructor"]
    tags: ["symbols", "document", "vscode", "service"]

  - id: "ts_docsym_compiler_file"
    name: "Document Symbols - TypeScript Compiler File"
    description: "Get symbols from TypeScript compiler file"
    method: "textDocument/documentSymbol"
    repository: "typescript"
    file: "src/compiler/checker.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 50  # Compiler files are complex with many functions
        types: ["function", "interface", "type", "variable", "namespace"]
    tags: ["symbols", "document", "typescript", "compiler"]

  - id: "ts_docsym_types_file"
    name: "Document Symbols - Types Definition File"
    description: "Get symbols from types definition file"
    method: "textDocument/documentSymbol"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 100  # Types file has many interfaces and types
        types: ["interface", "type", "enum", "namespace"]
    tags: ["symbols", "document", "types", "definitions"]

  # ===================
  # WORKSPACE SYMBOLS SCENARIOS
  # ===================
  
  - id: "ts_worksym_editor_search"
    name: "Workspace Symbol Search - Editor"
    description: "Search for Editor-related symbols across workspace"
    method: "workspace/symbol"
    repository: "vscode"
    query: "Editor"
    expected:
      success: true
      symbols:
        min_count: 50  # Editor is central to VSCode
        types: ["interface", "class", "type", "variable"]
    tags: ["symbols", "workspace", "search", "vscode"]

  - id: "ts_worksym_compiler_search"
    name: "Workspace Symbol Search - Compiler"
    description: "Search for compiler symbols"
    method: "workspace/symbol"
    repository: "typescript"
    query: "Compiler"
    expected:
      success: true
      symbols:
        min_count: 20
        types: ["interface", "class", "function", "type"]
    tags: ["symbols", "workspace", "compiler"]

  - id: "ts_worksym_service_search"
    name: "Workspace Symbol Search - Service"
    description: "Search for service implementations"
    method: "workspace/symbol"
    repository: "vscode"
    query: "Service"
    expected:
      success: true
      symbols:
        min_count: 30
        types: ["interface", "class", "type"]
    tags: ["symbols", "workspace", "service"]

# Performance test cases
performance_tests:
  - id: "ts_perf_large_types_file"
    name: "Performance - Large Types File"
    description: "Test performance on large TypeScript types file"
    method: "textDocument/definition"
    repository: "typescript"
    file: "src/compiler/types.ts"  # Very large file
    position:
      line: 5000
      character: 15
    timeout: "15s"
    expected:
      success: true
      definition:
        has_location: true
    tags: ["performance", "large-file", "types"]

  - id: "ts_perf_workspace_symbols"
    name: "Performance - Large Workspace Symbol Search"
    description: "Test workspace symbol search performance"
    method: "workspace/symbol"
    repository: "vscode"
    query: "Editor"  # Should match many editor-related symbols
    timeout: "20s"
    expected:
      success: true
      symbols:
        min_count: 50
    tags: ["performance", "workspace", "large-result"]

# Test repository configurations
test_repositories:
  vscode:
    path: "./test-repositories/typescript/vscode"
    description: "Visual Studio Code editor repository"
    setup:
      commands:
        - "npm install"
        - "npm run compile"
      timeout: "15m"
      env:
        NODE_ENV: "development"
  
  typescript:
    path: "./test-repositories/typescript/typescript"
    description: "TypeScript compiler repository"
    setup:
      commands:
        - "npm install"
        - "npm run build"
      timeout: "10m"