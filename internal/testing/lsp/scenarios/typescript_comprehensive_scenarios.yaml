# Comprehensive TypeScript/JavaScript LSP Testing Scenarios
# Enterprise-level test cases covering advanced TypeScript patterns
# Target: VS Code 1.96+, TypeScript 5.6+, Angular 18+

name: "TypeScript Comprehensive LSP Scenarios"
description: "Advanced TypeScript/JavaScript language server testing with real-world patterns"
language: "typescript"
version: "2.0.0"

# Test scenarios covering all 5 LSP features with advanced TypeScript patterns
scenarios:
  # ====================================
  # DEFINITION SCENARIOS - Advanced TypeScript
  # ====================================
  
  - id: "ts_def_conditional_type"
    name: "Go to Definition - Conditional Type"
    description: "Navigate to conditional type definition with complex type inference"
    method: "textDocument/definition"
    repository: "typescript"
    file: "src/lib/es5.d.ts"
    position: 
      line: 1472  # Extract conditional type usage
      character: 35
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "src/lib/"
    tags: ["definition", "conditional-types", "typescript", "advanced"]
    
  - id: "ts_def_mapped_type"
    name: "Go to Definition - Mapped Type"
    description: "Navigate to mapped type with keyof operator"
    method: "textDocument/definition"
    repository: "typescript"
    file: "src/lib/es5.d.ts"
    position:
      line: 1458  # Readonly<T> mapped type
      character: 20
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "mapped-types", "keyof", "typescript"]
    
  - id: "ts_def_template_literal"
    name: "Go to Definition - Template Literal Type"
    description: "Navigate to template literal type definition"
    method: "textDocument/definition"
    repository: "typescript"
    file: "tests/cases/conformance/types/literal/templateLiteralTypes1.ts"
    position:
      line: 15  # Template literal type usage
      character: 25
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "template-literal", "string-manipulation"]
    
  - id: "ts_def_decorator_metadata"
    name: "Go to Definition - Decorator with Metadata"
    description: "Navigate to decorator definition with metadata reflection"
    method: "textDocument/definition"
    repository: "angular"
    file: "packages/core/src/metadata/directives.ts"
    position:
      line: 150  # @Component decorator usage
      character: 2
    expected:
      success: true
      definition:
        has_location: true
        file_pattern: "packages/core/src/"
    tags: ["definition", "decorator", "metadata", "angular", "reflection"]
    
  - id: "ts_def_generic_constraint"
    name: "Go to Definition - Generic Constraint"
    description: "Navigate to generic type constraint definition"
    method: "textDocument/definition"
    repository: "vscode"
    file: "src/vs/base/common/lifecycle.ts"
    position:
      line: 45  # Generic constraint: T extends Disposable
      character: 30
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "generic", "constraint", "extends"]
    
  - id: "ts_def_namespace_merging"
    name: "Go to Definition - Merged Namespace"
    description: "Navigate through TypeScript namespace merging"
    method: "textDocument/definition"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 125  # ts namespace usage
      character: 10
    expected:
      success: true
      definition:
        has_location: true
    tags: ["definition", "namespace", "merging", "module-augmentation"]

  # ====================================
  # REFERENCES SCENARIOS - Complex Patterns
  # ====================================
  
  - id: "ts_ref_interface_hierarchy"
    name: "Find References - Interface Hierarchy"
    description: "Find all references across interface inheritance chain"
    method: "textDocument/references"
    repository: "vscode"
    file: "src/vs/editor/common/editorCommon.ts"
    position:
      line: 250  # IEditor interface in hierarchy
      character: 20
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 100  # Editor interfaces are heavily used
        include_declaration: true
    tags: ["references", "interface", "hierarchy", "inheritance"]
    
  - id: "ts_ref_generic_type_parameter"
    name: "Find References - Generic Type Parameter"
    description: "Find all usages of generic type parameter across methods"
    method: "textDocument/references"
    repository: "typescript"
    file: "src/compiler/checker.ts"
    position:
      line: 8500  # Generic type parameter T
      character: 45
    params:
      includeDeclaration: false
    expected:
      success: true
      references:
        min_count: 15  # Type parameter used in multiple methods
        include_declaration: false
    tags: ["references", "generic", "type-parameter", "inference"]
    
  - id: "ts_ref_dependency_injection"
    name: "Find References - Dependency Injection"
    description: "Find all references to Angular dependency injection token"
    method: "textDocument/references"
    repository: "angular"
    file: "packages/core/src/di/injection_token.ts"
    position:
      line: 85  # InjectionToken class
      character: 15
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 50  # DI tokens used throughout Angular
        include_declaration: true
    tags: ["references", "dependency-injection", "token", "angular"]
    
  - id: "ts_ref_module_augmentation"
    name: "Find References - Module Augmentation"
    description: "Find references across module augmentation boundaries"
    method: "textDocument/references"
    repository: "vscode"
    file: "src/typings/vscode.d.ts"
    position:
      line: 200  # VSCode API namespace augmentation
      character: 25
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 20
        include_declaration: true
    tags: ["references", "module-augmentation", "namespace", "api"]

  # ====================================
  # HOVER SCENARIOS - Rich Information
  # ====================================
  
  - id: "ts_hover_conditional_type_resolution"
    name: "Hover - Conditional Type Resolution"
    description: "Display resolved conditional type with complex inference"
    method: "textDocument/hover"
    repository: "typescript"
    file: "tests/cases/conformance/types/conditional/conditionalTypes1.ts"
    position:
      line: 25  # Complex conditional type
      character: 20
    expected:
      success: true
      hover:
        has_content: true
        contains: ["type", "extends", "infer", "conditional"]
        format: "markdown"
    tags: ["hover", "conditional-type", "type-inference", "resolution"]
    
  - id: "ts_hover_angular_directive"
    name: "Hover - Angular Directive Metadata"
    description: "Display Angular directive metadata with input/output info"
    method: "textDocument/hover"
    repository: "angular"
    file: "packages/common/src/directives/ng_if.ts"
    position:
      line: 150  # NgIf directive class
      character: 20
    expected:
      success: true
      hover:
        has_content: true
        contains: ["@Directive", "selector", "NgIf", "structural"]
        format: "markdown"
    tags: ["hover", "angular", "directive", "metadata", "structural"]
    
  - id: "ts_hover_generic_function_overload"
    name: "Hover - Generic Function Overloads"
    description: "Display all overloads of generic function with constraints"
    method: "textDocument/hover"
    repository: "vscode"
    file: "src/vs/base/common/arrays.ts"
    position:
      line: 120  # Generic array utility function
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["function", "overload", "generic", "<T>"]
        format: "markdown"
    tags: ["hover", "generic", "overload", "function", "constraint"]
    
  - id: "ts_hover_intersection_type"
    name: "Hover - Intersection Type"
    description: "Display intersection type with all combined properties"
    method: "textDocument/hover"
    repository: "typescript"
    file: "tests/cases/conformance/types/intersection/intersectionTypes1.ts"
    position:
      line: 30  # Intersection type usage
      character: 25
    expected:
      success: true
      hover:
        has_content: true
        contains: ["&", "intersection", "type"]
        format: "markdown"
    tags: ["hover", "intersection-type", "union", "type-algebra"]

  - id: "ts_hover_utility_type"
    name: "Hover - Built-in Utility Type"
    description: "Display utility type definition and usage"
    method: "textDocument/hover"
    repository: "typescript"
    file: "src/lib/es5.d.ts"
    position:
      line: 1485  # Partial<T> utility type
      character: 10
    expected:
      success: true
      hover:
        has_content: true
        contains: ["Partial", "utility", "type", "optional"]
        format: "markdown"
    tags: ["hover", "utility-type", "built-in", "mapped-type"]

  # ====================================
  # DOCUMENT SYMBOLS - Comprehensive Analysis
  # ====================================
  
  - id: "ts_docsym_angular_component"
    name: "Document Symbols - Angular Component"
    description: "Extract all symbols from Angular component with lifecycle hooks"
    method: "textDocument/documentSymbol"
    repository: "angular"
    file: "packages/common/src/directives/ng_for_of.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 25  # Component with properties, methods, lifecycle hooks
        types: ["class", "method", "property", "constructor", "decorator"]
    tags: ["symbols", "document", "angular", "component", "lifecycle"]
    
  - id: "ts_docsym_typescript_compiler"
    name: "Document Symbols - TypeScript Compiler Module"
    description: "Extract symbols from complex compiler module"
    method: "textDocument/documentSymbol"
    repository: "typescript"
    file: "src/compiler/checker.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 200  # Large compiler file with many functions
        types: ["function", "interface", "type", "variable", "namespace", "enum"]
    tags: ["symbols", "document", "typescript", "compiler", "complex"]
    
  - id: "ts_docsym_vscode_service"
    name: "Document Symbols - VSCode Service Class"
    description: "Extract symbols from VSCode service with dependency injection"
    method: "textDocument/documentSymbol"
    repository: "vscode"
    file: "src/vs/workbench/services/editor/browser/editorService.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 30  # Service class with many methods and properties
        types: ["class", "interface", "method", "property", "constructor", "import"]
    tags: ["symbols", "document", "vscode", "service", "dependency-injection"]
    
  - id: "ts_docsym_module_declarations"
    name: "Document Symbols - Module Declarations"
    description: "Extract symbols from TypeScript declaration file"
    method: "textDocument/documentSymbol"
    repository: "typescript"
    file: "src/lib/dom.generated.d.ts"
    position:
      line: 0
      character: 0
    expected:
      success: true
      symbols:
        min_count: 500  # DOM declarations have many interfaces
        types: ["interface", "type", "variable", "function", "namespace"]
    tags: ["symbols", "document", "declarations", "dom", "ambient"]

  # ====================================
  # WORKSPACE SYMBOLS - Cross-file Navigation
  # ====================================
  
  - id: "ts_worksym_component_search"
    name: "Workspace Symbol Search - Angular Components"
    description: "Search for Angular components across workspace"
    method: "workspace/symbol"
    repository: "angular"
    query: "Component"
    expected:
      success: true
      symbols:
        min_count: 100  # Angular has many components
        types: ["class", "interface", "type", "decorator"]
    tags: ["symbols", "workspace", "search", "angular", "component"]
    
  - id: "ts_worksym_service_pattern"
    name: "Workspace Symbol Search - Service Pattern"
    description: "Search for service pattern implementations"
    method: "workspace/symbol"
    repository: "vscode"
    query: "Service"
    expected:
      success: true
      symbols:
        min_count: 80  # VSCode has many service implementations
        types: ["class", "interface", "type"]
    tags: ["symbols", "workspace", "service", "pattern"]
    
  - id: "ts_worksym_type_definitions"
    name: "Workspace Symbol Search - Type Definitions"
    description: "Search for complex type definitions"
    method: "workspace/symbol"
    repository: "typescript"
    query: "Type"
    expected:
      success: true
      symbols:
        min_count: 150  # TypeScript compiler has many type definitions
        types: ["interface", "type", "enum", "class"]
    tags: ["symbols", "workspace", "type-definitions"]
    
  - id: "ts_worksym_utility_functions"
    name: "Workspace Symbol Search - Utility Functions"
    description: "Search for utility function patterns"
    method: "workspace/symbol"
    repository: "vscode"
    query: "util"
    expected:
      success: true
      symbols:
        min_count: 50
        types: ["function", "variable", "namespace", "class"]
    tags: ["symbols", "workspace", "utility", "functions"]

  # ====================================
  # ADVANCED TYPESCRIPT SCENARIOS
  # ====================================
  
  - id: "ts_advanced_higher_order_types"
    name: "Advanced - Higher Order Type Navigation"
    description: "Navigate through higher-order type transformations"
    method: "textDocument/definition"
    repository: "typescript"
    file: "tests/cases/conformance/types/mapped/mappedTypes4.ts"
    position:
      line: 40  # Higher-order type usage
      character: 20
    expected:
      success: true
      definition:
        has_location: true
    tags: ["advanced", "higher-order", "type-transformation"]
    
  - id: "ts_advanced_recursive_types"
    name: "Advanced - Recursive Type Definition"
    description: "Navigate through recursive type definitions"
    method: "textDocument/hover"
    repository: "typescript"
    file: "tests/cases/conformance/types/recursive/recursiveTypes1.ts"
    position:
      line: 20  # Recursive type
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["recursive", "type"]
    tags: ["advanced", "recursive", "self-reference"]
    
  - id: "ts_advanced_branded_types"
    name: "Advanced - Branded Types"
    description: "Test LSP with branded/nominal types"
    method: "textDocument/references"
    repository: "typescript"
    file: "tests/cases/conformance/types/literal/literalTypes1.ts"
    position:
      line: 50  # Branded type usage
      character: 25
    params:
      includeDeclaration: true
    expected:
      success: true
      references:
        min_count: 5
    tags: ["advanced", "branded", "nominal", "type-safety"]

  # ====================================
  # PERFORMANCE SCENARIOS
  # ====================================
  
  - id: "ts_perf_large_union_type"
    name: "Performance - Large Union Type"
    description: "Test performance with large union types"
    method: "textDocument/hover"
    repository: "typescript"
    file: "src/compiler/types.ts"
    position:
      line: 500  # Large union type
      character: 30
    timeout: "20s"
    expected:
      success: true
      hover:
        has_content: true
    tags: ["performance", "union-type", "large"]
    
  - id: "ts_perf_deep_generics"
    name: "Performance - Deep Generic Nesting"
    description: "Test performance with deeply nested generics"
    method: "textDocument/definition"
    repository: "vscode"
    file: "src/vs/base/common/event.ts"
    position:
      line: 200  # Deeply nested generic type
      character: 40
    timeout: "15s"
    expected:
      success: true
    tags: ["performance", "generic", "nesting", "deep"]
    
  - id: "ts_perf_workspace_large_query"
    name: "Performance - Large Workspace Query"
    description: "Test workspace symbol search with broad query"
    method: "workspace/symbol"
    repository: "angular"
    query: "ng"  # Very common prefix in Angular
    timeout: "30s"
    expected:
      success: true
      symbols:
        min_count: 500  # Should find many Angular symbols
    tags: ["performance", "workspace", "large-result"]

  # ====================================
  # JAVASCRIPT SCENARIOS
  # ====================================
  
  - id: "js_def_dynamic_import"
    name: "JavaScript - Dynamic Import Definition"
    description: "Navigate to dynamically imported module"
    method: "textDocument/definition"
    repository: "vscode"
    file: "src/vs/workbench/workbench.web.main.ts"
    position:
      line: 50  # Dynamic import statement
      character: 25
    expected:
      success: true
      definition:
        has_location: true
    tags: ["javascript", "dynamic-import", "module"]
    
  - id: "js_hover_jsdoc_type"
    name: "JavaScript - JSDoc Type Annotation"
    description: "Display JSDoc type information"
    method: "textDocument/hover"
    repository: "vscode"
    file: "src/vs/base/browser/dom.js"
    position:
      line: 100  # JSDoc annotated function
      character: 15
    expected:
      success: true
      hover:
        has_content: true
        contains: ["@param", "@returns", "function"]
        format: "markdown"
    tags: ["javascript", "jsdoc", "type-annotation"]

  # ====================================
  # FRAMEWORK INTEGRATION SCENARIOS
  # ====================================
  
  - id: "ts_angular_dependency_injection"
    name: "Angular - Dependency Injection Navigation"
    description: "Navigate through Angular DI system"
    method: "textDocument/definition"
    repository: "angular"
    file: "packages/core/src/di/injector.ts"
    position:
      line: 200  # Injector.get method
      character: 20
    expected:
      success: true
      definition:
        has_location: true
    tags: ["angular", "dependency-injection", "provider"]
    
  - id: "ts_angular_reactive_forms"
    name: "Angular - Reactive Forms Type Safety"
    description: "Test type safety in Angular reactive forms"
    method: "textDocument/hover"
    repository: "angular"
    file: "packages/forms/src/model/abstract_model.ts"
    position:
      line: 150  # FormControl generic type
      character: 25
    expected:
      success: true
      hover:
        has_content: true
        contains: ["FormControl", "generic", "type"]
    tags: ["angular", "reactive-forms", "type-safety"]

# Performance test cases
performance_tests:
  - id: "ts_perf_startup_time"
    name: "Performance - Language Server Startup"
    description: "Measure TypeScript language server startup time"
    method: "initialize"
    repository: "vscode"
    timeout: "45s"
    expected:
      success: true
    tags: ["performance", "startup", "initialization"]
    
  - id: "ts_perf_incremental_compilation"
    name: "Performance - Incremental Compilation"
    description: "Test incremental compilation performance"
    method: "textDocument/didChange"
    repository: "typescript"
    file: "src/compiler/checker.ts"
    timeout: "10s"
    tags: ["performance", "incremental", "compilation"]

# Test repository configurations with enhanced setup
test_repositories:
  vscode:
    path: "./test-repositories/typescript/vscode"
    setup:
      commands:
        - "node --version"  # Verify Node.js version
        - "npm ci"          # Clean install for reproducible builds
        - "npm run compile" # Compile TypeScript sources
        - "npm run compile-extension-host"  # Compile extension host
        - "npm run compile-web"            # Compile web worker
      timeout: "20m"
      env:
        NODE_ENV: "development"
        VSCODE_DEV: "1"
        NODE_OPTIONS: "--max-old-space-size=8192"
      validation:
        required_files:
          - "out/vs/code/electron-main/main.js"
          - "out/vs/workbench/workbench.desktop.main.js"
  
  typescript:
    path: "./test-repositories/typescript/typescript"
    setup:
      commands:
        - "npm ci"
        - "npm run build"
        - "npm run build:compiler"
      timeout: "15m"
      env:
        NODE_ENV: "development"
        NODE_OPTIONS: "--max-old-space-size=4096"
      validation:
        required_files:
          - "built/local/tsc.js"
          - "built/local/typescript.js"
          - "built/local/typingsInstaller.js"
  
  angular:
    path: "./test-repositories/typescript/angular"
    setup:
      commands:
        - "npm ci"
        - "npm run build"
        - "npm run build -- --configuration=production"
      timeout: "25m"
      env:
        NODE_ENV: "development"
        NODE_OPTIONS: "--max-old-space-size=8192"
        NG_BUILD_CACHE: "1"
      validation:
        required_files:
          - "dist/packages-dist/core/bundles/core.umd.min.js"
          - "dist/packages-dist/common/bundles/common.umd.min.js"

# Language server configuration
lsp_server_config:
  typescript-language-server:
    command: "typescript-language-server"
    args: ["--stdio"]
    init_options:
      preferences:
        includeInlayParameterNameHints: "all"
        includeInlayVariableTypeHints: true
        includeInlayPropertyDeclarationTypeHints: true
        includeInlayFunctionParameterTypeHints: true
        includeInlayEnumMemberValueHints: true
        includeInlayFunctionLikeReturnTypeHints: true
        includeCompletionsForModuleExports: true
        includeCompletionsForImportStatements: true
        allowIncompleteCompletions: true
        allowRenameOfImportPath: true
      tsserver:
        logLevel: "info"
        maxTsServerMemory: 8192
        useSyntaxServer: "auto"
        experimentalDecorators: true
        watchOptions:
          excludeDirectories: ["**/node_modules", "**/bower_components", "**/.git"]
        plugins:
          - name: "@angular/language-server"
          - name: "typescript-styled-plugin"
          - name: "typescript-immer-plugin"

# Validation rules
validation_rules:
  - rule: "typescript_version_check"
    description: "Validate TypeScript version compatibility"
    min_version: "5.0.0"
    max_version: "6.0.0"
    
  - rule: "node_version_check"
    description: "Validate Node.js version compatibility"
    min_version: "18.0.0"
    
  - rule: "performance_thresholds"
    description: "Performance requirements for TypeScript scenarios"
    thresholds:
      definition: "8s"
      references: "15s"
      hover: "5s"
      document_symbols: "20s"
      workspace_symbols: "30s"
      
  - rule: "memory_usage"
    description: "Memory usage limits"
    max_heap_size: "8GB"
    max_resident_set: "10GB"