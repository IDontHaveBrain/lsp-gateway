# Simple Multi-Language Configuration
# Use Case: Projects using multiple supported languages (Go, Python, JavaScript/TypeScript, Java, Rust, C#, Kotlin)
# Architecture: Simplified CLI with basic LSP server integration
# Supported Languages: Go, Python, JavaScript, TypeScript, Java, Rust, C#, Kotlin
# Supported Features: 6 essential LSP features (definition, references, hover, documentSymbol, workspace/symbol, completion)

# Basic server configuration for all supported languages
servers:
  # Go Language Server
  go:
    command: "gopls"
    args: []
    working_dir: ""
    initialization_options: {}

  # Python Language Server  
  python:
    command: "jedi-language-server"
    args: []
    working_dir: ""
    initialization_options: {}

  # JavaScript Language Server
  javascript:
    command: "typescript-language-server"
    args: ["--stdio"]
    working_dir: ""
    initialization_options: {}

  # TypeScript Language Server
  typescript:
    command: "typescript-language-server"
    args: ["--stdio"]
    working_dir: ""
    initialization_options: {}

  # Java Language Server
  java:
    command: "jdtls"
    args: []
    working_dir: ""
    initialization_options: {}

  # Rust Language Server
  rust:
    command: "rust-analyzer"
    args: []
    working_dir: ""
    initialization_options: {}

  # C# Language Server
  csharp:
    command: "omnisharp"
    args: []
    working_dir: ""
    initialization_options: {}

  # Kotlin Language Server (official JetBrains)
  kotlin:
    command: "kotlin-lsp"
    args: []
    working_dir: ""
    initialization_options: {}

# Unified Cache Configuration (Enabled by default)
# Standard production settings with simple units for improved performance
cache:
  enabled: true                               # Enabled by default for improved performance
  storage_path: ".lsp-gateway/scip-cache"     # Cache storage directory
  max_memory_mb: 512                          # Memory limit in MB (simple units)
  ttl_hours: 24                               # Cache time-to-live in hours (simple units - 24h for daily dev workflow)
  languages: ["*"]                           # Wildcard for all supported languages
  background_index: true                      # Enable background indexing
  health_check_minutes: 5                     # Health check interval in minutes (simple units)
  eviction_policy: "lru"                      # Cache eviction policy (lru, simple)
  disk_cache: false                           # Enable disk persistence (false for in-memory only)

# Configuration Notes:
# 
# 1. Language Detection:
#    - .go files -> go server
#    - .py files -> python server  
#    - .js, .jsx files -> javascript server
#    - .ts, .tsx files -> typescript server
#    - .java files -> java server
#    - .rs files -> rust server
#    - .cs files -> csharp server
#    - .kt, .kts files -> kotlin server
#
# 2. Server Commands:
#    - Ensure language servers are installed on your system
#    - gopls: go install golang.org/x/tools/gopls@latest
#    - jedi-language-server: pip install jedi-language-server
#    - typescript-language-server: npm install -g typescript-language-server typescript
#    - jdtls: Download from Eclipse JDT LS releases
#    - rust-analyzer: rustup component add rust-analyzer
#      If unavailable on stable: rustup toolchain install nightly && rustup component add rust-analyzer --toolchain nightly
#      Some systems use: rustup component add rust-analyzer-preview [--toolchain nightly]
#    - omnisharp: Download from OmniSharp releases or use dotnet tool install -g omnisharp
#    - kotlin-lsp: Install via brew (macOS) or download from official Kotlin LSP releases
#
# 3. Working Directory:
#    - Leave empty to use project root
#    - Set to specific path if needed for your setup
#
# 4. Customization:
#    - Add initialization_options for server-specific settings
#    - Modify args array for custom server parameters
#    - Set working_dir for specific workspace configurations
#
# 5. CLI Usage:
#    - lsp-gateway server --config config.yaml  # Start HTTP gateway on :8080
#    - lsp-gateway mcp                          # Start MCP server for AI assistants
#    - lsp-gateway status                       # Show server status
#    - lsp-gateway test                         # Test server connections
